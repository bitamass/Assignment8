<!DOCTYPE html>
<!-- saved from url=(0085)https://canvas.uw.edu/courses/1688237/pages/lesson-07-content?module_item_id=18564781 -->
<html dir="ltr" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta name="sentry-trace" content="34db853bc4614eb4b5400f08e036894f-08dfc44319f44866-0">
  <link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/fonts/lato/extended/Lato-Regular-bd03a2cc27.woff2" as="font" type="font/woff2" crossorigin="anonymous">
  <link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/fonts/lato/extended/Lato-Bold-cccb897485.woff2" as="font" type="font/woff2" crossorigin="anonymous">
  <link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/fonts/lato/extended/Lato-Italic-4eb103b4d1.woff2" as="font" type="font/woff2" crossorigin="anonymous">
  <link rel="stylesheet" href="./django_blog_files/fonts-6ee09b0b2f.css" media="screen">
    <script type="text/javascript" async="" src="./django_blog_files/heap-3001039959.js.download"></script><script>if (navigator.userAgent.match(/(MSIE|Trident\/)/)) location.replace('/ie-is-not-supported.html')</script>
  
  <link rel="icon" type="image/x-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312004/favicon.ico?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=lNl7iuCda9spDgRONbwVvr490LM%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  <link rel="apple-touch-icon" href="https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/37312005/Canvas-MobileHome.png?AWSAccessKeyId=AKIAJFNFXH2V2O7RPCAA&amp;Expires=1939374366&amp;Signature=jwVDIJvM6uIaOoE%2FSW94uwVcHU0%3D&amp;response-cache-control=Cache-Control%3Amax-age%3D473364000.0%2C%20public&amp;response-expires=473364000.0">
  <link rel="stylesheet" href="./django_blog_files/variables-7dd4b80918af0e0218ec0229e4bd5873.css" media="all">
  <link rel="stylesheet" href="./django_blog_files/common-fd3bdbb4cf.css" media="all">
  <meta name="apple-itunes-app" content="app-id=480883488">
<link rel="manifest" href="https://canvas.uw.edu/web-app-manifest/manifest.json">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="#4b2e83">
  <meta name="robots" content="noindex,nofollow">
  <link rel="stylesheet" href="./django_blog_files/wiki_page-bb0c0c1f96.css" media="all">
  <link rel="stylesheet" href="./django_blog_files/custom.css" media="all">
<link rel="stylesheet" href="./django_blog_files/custom(1).css" media="all">


  <script>
    INST = {"environment":"production","allowMediaComments":true,"kalturaSettings":{"domain":"nv.instructuremedia.com","resource_domain":"nv.instructuremedia.com","rtmp_domain":"iad.rtmp.instructuremedia.com","partner_id":"9","subpartner_id":"0","player_ui_conf":"0","kcw_ui_conf":"0","upload_ui_conf":"0","max_file_size_bytes":534773760,"do_analytics":false,"hide_rte_button":false,"js_uploader":true},"logPageViews":true,"editorButtons":[{"name":"Panopto Recordings","id":21130,"favorite":true,"url":"https://uw.hosted.panopto.com/Panopto/LTI/LTI.aspx","icon_url":"https://uw.hosted.panopto.com/Panopto/images/panopto_logo_globe.png","canvas_icon_class":null,"width":900,"height":700,"use_tray":false,"description":"\u003cp\u003eAccess Panopto recordings from Canvas\u003c/p\u003e\n"},{"name":"Commons Favorites","id":47186,"favorite":false,"url":"https://lor.instructure.com/api/lti/favorite-resources","icon_url":"https://lor.instructure.com/img/icon_commons.png","canvas_icon_class":null,"width":800,"height":400,"use_tray":true,"description":"\u003cp\u003eFind and share course content\u003c/p\u003e\n"},{"name":"","id":71123,"favorite":false,"url":"https://office365-iad-prod.instructure.com/lti/rce-content-item","icon_url":"https://office365-iad-prod.instructure.com/images/office365_icon.png","canvas_icon_class":null,"width":900,"height":600,"use_tray":false,"description":"\u003cp\u003eAllows you to pull documents from Office 365 into Canvas\u003c/p\u003e\n"},{"name":"Gale Virtual Reference Library","id":73253,"favorite":false,"url":"https://link.galegroup.com/apps/launch","icon_url":"https://link.galegroup.com/apps/resources/images/gale-logo.jpg","canvas_icon_class":null,"width":1000,"height":600,"use_tray":false,"description":"\u003cp\u003eGVRL App by Gale\u003c/p\u003e\n"},{"name":"Insert a Wiley Resource","id":111200,"favorite":false,"url":"https://lti.education.wiley.com/wpng/api/v1/lti/resourcediscoverytool","icon_url":"https://education.wiley.com/assets/images/wp.svg","canvas_icon_class":null,"width":1160,"height":660,"use_tray":false,"description":"\u003cp\u003eOutcomes-based learning.\u003c/p\u003e\n"},{"name":"myBusinessCourse Resource Selection","id":137968,"favorite":false,"url":"https://mybusinesscourse.com/platform/local/integrations/lti.php","icon_url":"https://mybusinesscourse.com/ublish/client/cpb/images/link_logo.png","canvas_icon_class":null,"width":800,"height":400,"use_tray":false,"description":"\u003cp\u003emyBusinessCourse LTI 1.3\u003c/p\u003e\n"},{"name":"Chicago Business Press Resource Selection","id":139388,"favorite":false,"url":"https://chicagobusinesspress.com/platform/local/integrations/lti.php","icon_url":"https://chicagobusinesspress.com/ublish/client/chipress/images/link_logo.png","canvas_icon_class":null,"width":800,"height":400,"use_tray":false,"description":"\u003cp\u003eChicago Business Press LTI 1.3\u003c/p\u003e\n"},{"name":"LinkedIn Learning","id":154305,"favorite":false,"url":"https://www.linkedin.com/checkpoint/enterprise/lti/67682169/auth/75996849/6957429039590502400","icon_url":"https://static-exp1.licdn.com/sc/h/3dio89ba7ceqktt0kek3tla5w","canvas_icon_class":null,"width":1000,"height":800,"use_tray":false,"description":"\u003cp\u003eLearningIn Learning LTI 1.3\u003c/p\u003e\n"},{"name":"Embed Kaltura Media","id":157634,"favorite":true,"url":"","icon_url":"https://cdnsecakmi.kaltura.com/content/static/kalturalogo.png","canvas_icon_class":null,"width":800,"height":400,"use_tray":false,"description":"\u003cp\u003eUniversity of Washington Continuum\u003c/p\u003e\n"},{"name":"Pearson Links","id":173591,"favorite":false,"url":"https://interop.pearson.com/launch","icon_url":"https://www.pearson.com/us/content/dam/one-dot-com/one-dot-com/us/en/images/PearsonThumbprint-RGB-127x138.png/_jcr_content/renditions/cq5dam.web.1600.9600.png","canvas_icon_class":null,"width":800,"height":400,"use_tray":false,"description":"\u003cp\u003eAccess Pearson\u003c/p\u003e\n"}]};
    ENV = {"ASSET_HOST":"https://du11hjcvx0uqb.cloudfront.net","active_brand_config_json_url":"https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/bc375d9c18002194f6c0158bfa87b14a/variables-7dd4b80918af0e0218ec0229e4bd5873.json","active_brand_config":{"md5":"bc375d9c18002194f6c0158bfa87b14a","variables":{},"share":false,"name":null,"created_at":"2023-03-23T13:00:28-07:00","js_overrides":"https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/79098377/custom.js","css_overrides":"https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/100612610/custom.css","parent_md5":"39dc710b1d936eb796f9e3fd688202a5","mobile_js_overrides":"","mobile_css_overrides":"https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/95614037/mobile.css"},"confetti_branding_enabled":false,"url_to_what_gets_loaded_inside_the_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/bc375d9c18002194f6c0158bfa87b14a/variables-7dd4b80918af0e0218ec0229e4bd5873.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_normal_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-a64c7fe33c.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/no_variables/bundles/fonts-6ee09b0b2f.css"],"url_for_high_contrast_tinymce_editor_css":["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/default/variables-high_contrast-7dd4b80918af0e0218ec0229e4bd5873.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/new_styles_high_contrast/bundles/what_gets_loaded_inside_the_tinymce_editor-fa0672d544.css","https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/no_variables/bundles/fonts-6ee09b0b2f.css"],"current_user_id":"4301929","current_user_global_id":"100000004301929","current_user_heap_id":"uu-2-403da8729e239c4c8e8540378258daf485c558a3362bc36bea7fafd86facbfd7-hMdW75SAnZRIzmj4yn9Zl1cW9eAMfEUMSztnrw0F","current_user_roles":["user","student"],"current_user_is_student":true,"current_user_types":[],"current_user_disabled_inbox":false,"current_user_visited_tabs":null,"discussions_reporting":false,"files_domain":"cluster10.canvas-user-content.com","group_information":null,"DOMAIN_ROOT_ACCOUNT_ID":"100000000083919","DOMAIN_ROOT_ACCOUNT_UUID":"hMdW75SAnZRIzmj4yn9Zl1cW9eAMfEUMSztnrw0F","k12":false,"help_link_name":"Help","help_link_icon":"help","use_high_contrast":false,"auto_show_cc":false,"disable_celebrations":false,"disable_keyboard_shortcuts":false,"LTI_LAUNCH_FRAME_ALLOWANCES":["geolocation *","microphone *","camera *","midi *","encrypted-media *","autoplay *","clipboard-write *","display-capture *"],"DEEP_LINKING_POST_MESSAGE_ORIGIN":"https://canvas.uw.edu","DEEP_LINKING_LOGGING":null,"comment_library_suggestions_enabled":false,"SETTINGS":{"open_registration":false,"collapse_global_nav":false,"release_notes_badge_disabled":false},"FULL_STORY_ENABLED":false,"RAILS_ENVIRONMENT":"Production","IN_PACED_COURSE":false,"SENTRY_FRONTEND":{"dsn":"https://355a1d96717e4038ac25aa852fa79a8f@relay-iad.sentry.insops.net/388","org_slug":"instructure","base_url":"https://sentry.insops.net","normalized_route":"/courses/{course_id}/pages/{id}","errors_sample_rate":"0.0005","traces_sample_rate":"0.0005","url_deny_pattern":"instructure-uploads.*amazonaws.com","revision":"canvas-lms@20231108.213"},"DATA_COLLECTION_ENDPOINT":"https://canvas-frontend-data-iad-prod.inscloudgate.net/submit","DOMAIN_ROOT_ACCOUNT_SFID":"001A000000YzgTSIAZ","DIRECT_SHARE_ENABLED":false,"CAN_VIEW_CONTENT_SHARES":false,"FEATURES":{"featured_help_links":true,"lti_platform_storage":true,"calendar_series":true,"account_level_blackout_dates":false,"render_both_to_do_lists":false,"course_paces_redesign":true,"course_paces_for_students":true,"module_publish_menu":true,"explicit_latex_typesetting":false,"dev_key_oidc_alert":true,"media_links_use_attachment_id":false,"permanent_page_links":true,"differentiated_modules":false,"enhanced_course_creation_account_fetching":false,"instui_for_import_page":false,"product_tours":false,"usage_rights_discussion_topics":true,"granular_permissions_manage_users":true,"create_course_subaccount_picker":true,"lti_deep_linking_module_index_menu_modal":true,"lti_multiple_assignment_deep_linking":true,"lti_overwrite_user_url_input_select_content_dialog":true,"lti_unique_tool_form_ids":false,"buttons_and_icons_root_account":true,"extended_submission_state":false,"scheduled_page_publication":true,"send_usage_metrics":true,"rce_transform_loaded_content":false,"lti_assignment_page_line_items":true,"mobile_offline_mode":false,"react_discussions_post":false,"instui_nav":false,"embedded_release_notes":true,"canvas_k6_theme":false,"new_math_equation_handling":true},"current_user":{"id":"4301929","anonymous_id":"2k7e1","display_name":"Bita Massoudi","avatar_image_url":"https://canvas.uw.edu/images/messages/avatar-50.png","html_url":"https://canvas.uw.edu/about/4301929","pronouns":null,"avatar_is_fallback":true},"page_view_update_url":"/page_views/252d39de-34ac-43da-82e7-62ec5c245d1a?page_view_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpIjoiMjUyZDM5ZGUtMzRhYy00M2RhLTgyZTctNjJlYzVjMjQ1ZDFhIiwidSI6MTAwMDAwMDA0MzAxOTI5LCJjIjoiMjAyMy0xMS0xNVQyMTo0NjoyMS42OVoifQ.4t1ij7vuB7PmCLWm5bv-jnWO123VHXrKY3wFOqjw2ng","context_asset_string":"course_1688237","ping_url":"https://canvas.uw.edu/api/v1/courses/1688237/ping","TIMEZONE":"America/Los_Angeles","CONTEXT_TIMEZONE":"America/Los_Angeles","LOCALES":["en"],"BIGEASY_LOCALE":"en_US","FULLCALENDAR_LOCALE":"en","MOMENT_LOCALE":"en","rce_auto_save_max_age_ms":86400000,"K5_USER":false,"USE_CLASSIC_FONT":false,"K5_HOMEROOM_COURSE":false,"K5_SUBJECT_COURSE":false,"LOCALE_TRANSLATION_FILE":"/dist/javascripts/translations/en-888412cb6b.json","ACCOUNT_ID":"103309","user_cache_key":"MktUTjY0MEdTd3JlRVNLUVdJa2xEVm5VVHM2QmhsaWQ0ZGpuTjhzSXZ5Zlc9\nO1twLTA/OntQXz1IVXBncmFxZTtuamFsa2hwdm9pdWxraW1tYXFld2c=\n","WIKI_RIGHTS":{"read":true},"PAGE_RIGHTS":{"read":true},"DEFAULT_EDITING_ROLES":"teachers","WIKI_PAGES_PATH":"/courses/1688237/pages","WIKI_PAGE":{"title":"Lesson 07 Content","created_at":"2023-06-20T17:23:47-07:00","url":"lesson-07-content","editing_roles":"teachers","page_id":"6704024","published":true,"hide_from_students":false,"front_page":false,"html_url":"https://canvas.uw.edu/courses/1688237/pages/lesson-07-content","todo_date":null,"publish_at":null,"updated_at":"2023-06-20T17:23:47-07:00","locked_for_user":false,"body":"\u003cdiv id=\"menuheading\"\u003e\n\u003ch2 class=\"caH2\"\u003eDjango... continued\u003c/h2\u003e\n\u003cdiv id=\"navbar\" class=\"caNav grid-row around-md clearunderlinestyle\" role=\"navigation\"\u003e\u003ca class=\"icon-info\" title=\"Lesson 07 Introduction\" href=\"https://canvas.uw.edu/courses/1688237/pages/lesson-07-introduction\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1688237/pages/lesson-07-introduction\" data-api-returntype=\"Page\"\u003eIntroduction\u003c/a\u003e | \u003ca class=\"icon-integrations\" title=\"Lesson 07 Content\" href=\"https://canvas.uw.edu/courses/1688237/pages/lesson-07-content\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1688237/pages/lesson-07-content\" data-api-returntype=\"Page\"\u003eContent\u003c/a\u003e | \u003ca class=\"icon-quiz\" title=\"Lesson 07 Quiz\" href=\"https://canvas.uw.edu/courses/1688237/assignments/8426908\" data-api-returntype=\"Assignment\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1688237/assignments/8426908\"\u003eQuiz\u003c/a\u003e\u0026nbsp;| \u003ca class=\"icon-educators\" title=\"Lesson 07 Activity\" href=\"https://canvas.uw.edu/courses/1688237/assignments/8426929\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1688237/assignments/8426929\" data-api-returntype=\"Assignment\"\u003eActivity\u003c/a\u003e | \u003ca class=\"icon-assignment\" title=\"Lesson 07 Assignment\" href=\"https://canvas.uw.edu/courses/1688237/assignments/8426930\" data-api-returntype=\"Assignment\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1688237/assignments/8426930\"\u003eAssignment\u003c/a\u003e | \u003ca class=\"icon-settings\" title=\"Lesson 07 Code Talk\" href=\"https://canvas.uw.edu/courses/1688237/discussion_topics/8197159\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1688237/discussion_topics/8197159\" data-api-returntype=\"Discussion\"\u003eCode Talk\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003ch3\u003e\u003cspan\u003eModel View Template (MVT) Applications\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eWe have already started our Django blogging app, but before we continue working on it, let's examine the Model View Template (MVT) pattern that Django uses to help us organize our code.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003ciframe style=\"width: 700px; height: 405px;\" title=\"Internet Programming in Python: 06.05 Model View Controller\" src=\"https://canvas.uw.edu/courses/1688237/external_tools/retrieve?display=borderless\u0026amp;url=https%3A%2F%2F4157763.kaf.kaltura.com%2Fbrowseandembed%2Findex%2Fmedia%2Fentryid%2F1_1e5myk50%2FshowDescription%2Ffalse%2FshowTitle%2Ffalse%2FshowTags%2Ffalse%2FshowDuration%2Ffalse%2FshowOwner%2Ffalse%2FshowUploadDate%2Ffalse%2FplayerSize%2F700x394%2FplayerSkin%2F48459823%2F%2FthumbEmbed%2F1%2F\" width=\"700px\" height=\"405px\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"geolocation *; midi *; encrypted-media *; autoplay *\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eCategorizing Posts\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eOkay, we are ready to continue working on our Django blog!\u0026nbsp;\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eOne of the most common features in a blog is the ability to categorize posts.\u0026nbsp;Let’s add this feature to our blog.\u0026nbsp;To do so, we’ll be adding a new model, and making some changes to existing code.\u0026nbsp;This means that we’ll need to\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003echange our database schema\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eYou’ve seen how to add new tables to a database using the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003emigrate\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ecommand.\u0026nbsp;And you’ve created your first migration in setting up the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003ePost\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003emodel.\u0026nbsp;This is an example of altering the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003edatabase schema\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eusing Python code.\u003c/p\u003e\n\u003cp\u003eWe want to add a new model to represent the categories our blog posts might fall into. The following video describes the requirements for this model.\u003c/p\u003e\n\u003cp\u003e\u003ciframe style=\"width: 700px; height: 405px;\" title=\"Internet Programming in Python: 07.01 The Category Model\" src=\"https://canvas.uw.edu/courses/1688237/external_tools/retrieve?display=borderless\u0026amp;url=https%3A%2F%2F4157763.kaf.kaltura.com%2Fbrowseandembed%2Findex%2Fmedia%2Fentryid%2F1_mmgbvpox%2FshowDescription%2Ffalse%2FshowTitle%2Ffalse%2FshowTags%2Ffalse%2FshowDuration%2Ffalse%2FshowOwner%2Ffalse%2FshowUploadDate%2Ffalse%2FplayerSize%2F700x394%2FplayerSkin%2F48459823%2F%2FthumbEmbed%2F1%2F\" width=\"700px\" height=\"405px\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"geolocation *; midi *; encrypted-media *; autoplay *\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003eWhen you're ready to see my solution, it is below:\u003c/p\u003e\n\u003cp\u003e\u003ciframe style=\"width: 700px; height: 405px;\" title=\"Internet Programming in Python: 07.02 Category Model Solution\" src=\"https://canvas.uw.edu/courses/1688237/external_tools/retrieve?display=borderless\u0026amp;url=https%3A%2F%2F4157763.kaf.kaltura.com%2Fbrowseandembed%2Findex%2Fmedia%2Fentryid%2F1_3xexi4do%2FshowDescription%2Ffalse%2FshowTitle%2Ffalse%2FshowTags%2Ffalse%2FshowDuration%2Ffalse%2FshowOwner%2Ffalse%2FshowUploadDate%2Ffalse%2FplayerSize%2F700x394%2FplayerSkin%2F48459823%2F%2FthumbEmbed%2F1%2F\" width=\"700px\" height=\"405px\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"geolocation *; midi *; encrypted-media *; autoplay *\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003eAnd here is the content I added to my blogging/models.py.\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003eclass\u003c/span\u003e \u003cspan style=\"color: #bb0066;\"\u003eCategory\u003c/span\u003e(models\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eModel):\n    name \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e models\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eCharField(max_length\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #0000dd;\"\u003e128\u003c/span\u003e)\n    description \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e models\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eTextField(blank\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #008800;\"\u003eTrue\u003c/span\u003e)\n    posts \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e models\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eManyToManyField(Post, blank\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #008800;\"\u003eTrue\u003c/span\u003e, related_name\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e'categories'\u003c/span\u003e)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eIn our\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003ePost\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003emodel, we used a\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eForeignKeyField\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003efield to match an author to her posts. This models the situation in which a single author can have many posts, while each post has only one author.\u0026nbsp;We call this a\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003eMany to One\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003erelationship.\u0026nbsp;But any given\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003ePost\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003emight belong in more than one\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eCategory\u003c/span\u003e\u003c/code\u003e.\u0026nbsp;And it would be a waste to allow only one\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003ePost\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003efor each\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eCategory\u003c/span\u003e\u003c/code\u003e. This is why we used the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eManyToManyField\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eAfter making our model changes, we migrated our changes into our database:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #c65d09;\"\u003e(djangoenv)$\u003c/span\u003e python manage.py makemigrations\n\u003cspan style=\"color: #888888;\"\u003eMigrations for 'blogging':\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e  0002_category.py:\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e    - Create model Category\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eOnce the migration has been created, we can apply it with the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003emigrate\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003emanagement command.\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #c65d09;\"\u003e(djangoenv)$\u003c/span\u003e python manage.py migrate\n\u003cspan style=\"color: #888888;\"\u003eOperations to perform:\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e  Apply all migrations: sessions, contenttypes, admin, blogging, auth\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003eRunning migrations:\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e  Rendering model states... DONE\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e  Applying blogging.0002_category... OK\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eFinally, we registered the `Category` model with the Django admin, started up our server, and added some categories in the admin. Here is the `blogging/models.py` that we used to register our model:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #888888;\"\u003e# blogging/admin.py\u003c/span\u003e\n\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edjango.contrib\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e admin\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003eblogging.models\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e Post, Category  \u003cspan style=\"color: #888888;\"\u003e# \u0026lt;-- import Category\u003c/span\u003e\n\n\nadmin\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003esite\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eregister(Post)\nadmin\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003esite\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eregister(Category)               \u003cspan style=\"color: #888888;\"\u003e# \u0026lt;-- Register Category\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003ch4\u003eImproving the Category Model\u003c/h4\u003e\n\u003cp\u003eIn the admin, we saw the the list of categories had category names along the lines of \"Category Object 1\", \"Category Object 2\", etc. Just like with posts, Django doesn't know what to call each of these categories. We have to tell Django that the `name` field is what it should use to name a Category!\u003c/p\u003e\n\u003cp\u003eSo let’s make\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eCategory\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eobject look nice the same way we did with\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003ePost\u003c/span\u003e\u003c/code\u003e. We'll begin with a test. Add\u0026nbsp;this to\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/tests.py\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #888888;\"\u003e# another import\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003eblogging.models\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e Category\n\n\u003cspan style=\"color: #888888;\"\u003e# and the test case and test\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003eclass\u003c/span\u003e \u003cspan style=\"color: #bb0066;\"\u003eCategoryTestCase\u003c/span\u003e(TestCase):\n\n    \u003cspan style=\"color: #008800;\"\u003edef\u003c/span\u003e \u003cspan style=\"color: #0066bb;\"\u003etest_string_representation\u003c/span\u003e(\u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e):\n        expected \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"A Category\"\u003c/span\u003e\n        c1 \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e Category(name\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003eexpected)\n        actual \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #007020;\"\u003estr\u003c/span\u003e(c1)\n        \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eassertEqual(expected, actual)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eWhen you run your tests, you now have two, and one is failing because the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eCategory\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eobject doesn’t look right.\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #c65d09;\"\u003e(djangoenv)$\u003c/span\u003e python manage.py \u003cspan style=\"color: #007020;\"\u003etest \u003c/span\u003eblogging\n\u003cspan style=\"color: #888888;\"\u003eCreating test database for alias 'default'...\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e...\u003c/span\u003e\n\n\u003cspan style=\"color: #888888;\"\u003eRan 2 tests in 0.011s\u003c/span\u003e\n\n\u003cspan style=\"color: #888888;\"\u003eFAILED (failures=1)\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eDo you remember how you made that change for a\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003ePost\u003c/span\u003e\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003eclass\u003c/span\u003e \u003cspan style=\"color: #bb0066;\"\u003eCategory\u003c/span\u003e(models\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eModel):\n    \u003cspan style=\"color: #888888;\"\u003e#...\u003c/span\u003e\n\n    \u003cspan style=\"color: #008800;\"\u003edef\u003c/span\u003e \u003cspan style=\"color: #0066bb;\"\u003e__str__\u003c/span\u003e(\u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e):\n        \u003cspan style=\"color: #008800;\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003ename\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eThis change should resolve our tests. Try running the blogging app tests again. Do they pass?\u003c/p\u003e\n\u003cp\u003eAnd you can also start your Django development server and see if posts are correctly listed in \u003ca href=\"http://localhost:8000/admin/\"\u003ethe admin.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou may also have noticed that the admin links to the list of categories with the word \"Categorys\". Categorys? That looks funny. In \u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/models.py\u003c/span\u003e\u003c/code\u003e, add the following method to the Category class:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003eclass\u003c/span\u003e \u003cspan style=\"color: #bb0066;\"\u003eCategory\u003c/span\u003e(models\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eModel):\u003cbr\u003e\u003cspan style=\"color: #888888;\"\u003e    #...\u003c/span\u003e \u003cbr\u003e\u003cbr\u003e    \u003cspan style=\"color: #008800;\"\u003eclass\u003c/span\u003e \u003cspan style=\"color: #bb0066;\"\u003eMeta\u003c/span\u003e:\n        verbose_name_plural \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e'Categories'\u003c/span\u003e\u0026nbsp;\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eSave that file and reload \u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003ehttp://localhost:8000/admin/.\u0026nbsp;\u003c/span\u003e\u003c/code\u003eMuch bettter. Go ahead and add a few categories and put some posts in them. Visit your posts, add new ones and then categorize them.\u003c/p\u003e\n\u003cp\u003eWe have now completed a data model for our application.\u0026nbsp;And thanks to Django’s easy-to-use admin, we have a reasonable CRUD application where we can manage blog posts and the categories we put them in.\u003c/p\u003e\n\u003cdiv id=\"break-time\" class=\"section\"\u003e\n\u003cp\u003eOnce you have this working, commit your changes. Next we will\u0026nbsp;put a public face on our new creation.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"a-public-face\" class=\"section\"\u003e\n\u003ch3\u003e\u003cspan\u003eA Public Face\u003c/span\u003e\u003c/h3\u003e\n\u003cp class=\"left\"\u003ePoint your browser at\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ca class=\"reference external\" href=\"http://localhost:8000/\"\u003ehttp://localhost:8000/\u003c/a\u003e.\u0026nbsp;What do you see?\u0026nbsp;Why?\u003c/p\u003e\n\u003cp\u003eWe need to add some public pages for our blog.\u0026nbsp;In Django, the code that builds a page that you can see is called a\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003eview\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv id=\"django-views\" class=\"section\"\u003e\n\u003ch3\u003eDjango Views\u003c/h3\u003e\n\u003cp\u003eA\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003eview\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ecan be defined as a\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003ecallable\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ethat takes a request and returns a response.\u0026nbsp;Classically, Django views were functions, but starting in version 1.3 there is added support for Class-based Views (a class with a\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003e__call__\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003emethod is a callable).\u0026nbsp;Let’s add a really simple view to our app.\u0026nbsp;It will be a stub for our public UI.\u003c/p\u003e\n\u003cp\u003eAdd this to\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eviews.py\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ein\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edjango.http\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e HttpResponse, HttpResponseRedirect, Http404\n\n\u003cspan style=\"color: #008800;\"\u003edef\u003c/span\u003e \u003cspan style=\"color: #0066bb;\"\u003estub_view\u003c/span\u003e(request, \u003cspan style=\"color: #333333;\"\u003e*\u003c/span\u003eargs, \u003cspan style=\"color: #333333;\"\u003e**\u003c/span\u003ekwargs):\n    body \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"Stub View\u003c/span\u003e\u003cspan style=\"color: #666666; background-color: #fff0f0;\"\u003e\\n\\n\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"\u003c/span\u003e\n    \u003cspan style=\"color: #008800;\"\u003eif\u003c/span\u003e args:\n        body \u003cspan style=\"color: #333333;\"\u003e+=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"Args:\u003c/span\u003e\u003cspan style=\"color: #666666; background-color: #fff0f0;\"\u003e\\n\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"\u003c/span\u003e\n        body \u003cspan style=\"color: #333333;\"\u003e+=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #666666; background-color: #fff0f0;\"\u003e\\n\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003ejoin([\u003cspan style=\"background-color: #fff0f0;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #666666; background-color: #fff0f0;\"\u003e\\t\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e%s\"\u003c/span\u003e \u003cspan style=\"color: #333333;\"\u003e%\u003c/span\u003e a \u003cspan style=\"color: #008800;\"\u003efor\u003c/span\u003e a \u003cspan style=\"color: #000000;\"\u003ein\u003c/span\u003e args])\n    \u003cspan style=\"color: #008800;\"\u003eif\u003c/span\u003e kwargs:\n        body \u003cspan style=\"color: #333333;\"\u003e+=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"Kwargs:\u003c/span\u003e\u003cspan style=\"color: #666666; background-color: #fff0f0;\"\u003e\\n\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"\u003c/span\u003e\n        body \u003cspan style=\"color: #333333;\"\u003e+=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #666666; background-color: #fff0f0;\"\u003e\\n\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003ejoin([\u003cspan style=\"background-color: #fff0f0;\"\u003e\"\u003c/span\u003e\u003cspan style=\"color: #666666; background-color: #fff0f0;\"\u003e\\t\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e%s: %s\"\u003c/span\u003e \u003cspan style=\"color: #333333;\"\u003e%\u003c/span\u003e i \u003cspan style=\"color: #008800;\"\u003efor\u003c/span\u003e i \u003cspan style=\"color: #000000;\"\u003ein\u003c/span\u003e kwargs\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eitems()])\n    \u003cspan style=\"color: #008800;\"\u003ereturn\u003c/span\u003e HttpResponse(body, content_type\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"text/plain\"\u003c/span\u003e)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eIn the Starting Django tutorial, you learned about Django\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cstrong\u003eurlconfs.\u0026nbsp;\u003c/strong\u003eWe used our project urlconf to hook the Django admin into our project and we want to do the same thing for our new app.\u0026nbsp;In general, an\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ethat serves any sort of views should contain its own urlconf.\u0026nbsp;The project urlconf should mainly\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003einclude\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ethese where possible.\u003c/p\u003e\n\u003cp\u003eCreate a new file\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eurls.py\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003einside the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eapp package.\u0026nbsp;Open it in your editor and add the following code:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edjango.urls\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e path\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003eblogging.views\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e stub_view\n\nurlpatterns \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e [\n    path(\u003cspan style=\"background-color: #fff0f0;\"\u003e''\u003c/span\u003e, stub_view, name\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"blog_index\"\u003c/span\u003e),\n]\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eIn order for our new urls to load, we’ll need to include them in our project urlconf.\u0026nbsp;Open\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eurls.py\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003efrom the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003emysite\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eproject package and add this:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #888888;\"\u003e# add this new import\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edjango.urls\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e path, include    \u003cspan style=\"color: #888888;\"\u003e# \u0026lt;-- make sure that you have both of these imports\u003c/span\u003e\n\n\u003cspan style=\"color: #888888;\"\u003e# then modify urlpatterns as follows:\u003c/span\u003e\nurlpatterns \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e [\n    path(\u003cspan style=\"background-color: #fff0f0;\"\u003e''\u003c/span\u003e, include(\u003cspan style=\"background-color: #fff0f0;\"\u003e'blogging.urls'\u003c/span\u003e)),  \u003cspan style=\"color: #888888;\"\u003e# \u0026lt;-- add this\u003c/span\u003e\n    \u003cspan style=\"color: #888888;\"\u003e#... other included urls\u003c/span\u003e\n]\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eTry reloading\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ca class=\"reference external\" href=\"http://localhost:8000/\"\u003ehttp://localhost:8000/\u003c/a\u003e.\u0026nbsp;You should see some output now!\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eOnce you have this working, commit your changes.\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"project-url-space\" class=\"section\"\u003e\n\u003ch3\u003eProject URL Space\u003c/h3\u003e\n\u003cp\u003eA project is defined by the urls a user can visit.\u0026nbsp;What should our users be able to see when they visit our blog?\u003c/p\u003e\n\u003cul class=\"build simple\"\u003e\n\u003cli\u003eA list view that shows blog posts, most recent first.\u003c/li\u003e\n\u003cli\u003eAn individual post view, showing a single post (a permalink).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet’s add urls for each of these.\u0026nbsp;For now, we’ll use the stub view we’ve created so we can concentrate on the url routing.\u0026nbsp;We’ve already got a good url for the list page:\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblog_index\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eat ‘/’.\u0026nbsp;For the view of a single post, we’ll need to capture the id of the post.\u003c/p\u003e\n\u003cp\u003eAdd this to\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eurlpatterns\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ein\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/urls.py\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e    path(\u003cspan style=\"background-color: #fff0f0;\"\u003e'posts/\u0026lt;int:post_id\u0026gt;/'\u003c/span\u003e, stub_view, name\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"blog_detail\"\u003c/span\u003e),\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cspan\u003e\u003cem\u003e\u0026lt;int:post_id\u0026gt;\u003c/em\u003e\u0026nbsp;\u003c/span\u003ecaptures one or more digits as the post_id. And the \u003ccode\u003estub_view\u003c/code\u003e has shown us that we can capture this number provided in the path and use it in our view.\u003c/p\u003e\n\u003cp\u003eYour \u003ccode\u003eblogging/urls.py\u003c/code\u003e should now look like:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edjango.urls\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e path\n\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003eblogging.views\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e stub_view\n\nurlpatterns \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e [\n    path(\u003cspan style=\"background-color: #fff0f0;\"\u003e''\u003c/span\u003e, stub_view, name\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"blog_index\"\u003c/span\u003e),\n    path(\u003cspan style=\"background-color: #fff0f0;\"\u003e'posts/\u0026lt;int:post_id\u0026gt;/'\u003c/span\u003e, stub_view, name\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"blog_detail\"\u003c/span\u003e),\n]\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eBefore we begin writing real views, we need to add some tests for the views we are about to create. We’ll need tests for a list view and a detail view, so\u0026nbsp;add the following\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003eimports\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eat the top of\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/tests.py\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edatetime\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edjango.utils.timezone\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e utc\u003cbr\u003e\n\u003cspan style=\"color: #008800;\"\u003eclass\u003c/span\u003e \u003cspan style=\"color: #bb0066;\"\u003eFrontEndTestCase\u003c/span\u003e(TestCase):\n    \u003cspan style=\"color: #dd4422;\"\u003e\"\"\"test views provided in the front-end\"\"\"\u003c/span\u003e\n    fixtures \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e [\u003cspan style=\"background-color: #fff0f0;\"\u003e'blogging_test_fixture.json'\u003c/span\u003e, ]\n\n    \u003cspan style=\"color: #008800;\"\u003edef\u003c/span\u003e \u003cspan style=\"color: #0066bb;\"\u003esetUp\u003c/span\u003e(\u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e):\n        \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003enow \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e datetime\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003edatetime\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eutcnow()\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003ereplace(tzinfo\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003eutc)\n        \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003etimedelta \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e datetime\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003etimedelta(\u003cspan style=\"color: #0000dd;\"\u003e15\u003c/span\u003e)\n        author \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e User\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eget(pk\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #0000dd;\"\u003e1\u003c/span\u003e)\n        \u003cspan style=\"color: #008800;\"\u003efor\u003c/span\u003e count \u003cspan style=\"color: #000000;\"\u003ein\u003c/span\u003e \u003cspan style=\"color: #007020;\"\u003erange\u003c/span\u003e(\u003cspan style=\"color: #0000dd;\"\u003e1\u003c/span\u003e, \u003cspan style=\"color: #0000dd;\"\u003e11\u003c/span\u003e):\n            post \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e Post(title\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"Post %d Title\"\u003c/span\u003e \u003cspan style=\"color: #333333;\"\u003e%\u003c/span\u003e count,\n                        text\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"foo\"\u003c/span\u003e,\n                        author\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003eauthor)\n            \u003cspan style=\"color: #008800;\"\u003eif\u003c/span\u003e count \u003cspan style=\"color: #333333;\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color: #0000dd;\"\u003e6\u003c/span\u003e:\n                \u003cspan style=\"color: #888888;\"\u003e# publish the first five posts\u003c/span\u003e\n                pubdate \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003enow \u003cspan style=\"color: #333333;\"\u003e-\u003c/span\u003e \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003etimedelta \u003cspan style=\"color: #333333;\"\u003e*\u003c/span\u003e count\n                post\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003epublished_date \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e pubdate\n            post\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003esave()\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"our-list-view\" class=\"section\"\u003e\n\u003ch3\u003eOur List View\u003c/h3\u003e\n\u003cp\u003eWe’d like our list view to show our posts.\u0026nbsp;But in this blog, we have the ability to publish posts.Unpublished posts should not be seen in the front-end views.\u0026nbsp;We set up our tests to have 5 published, and 5 unpublished posts.\u003c/p\u003e\n\u003cp\u003eLet’s add a test to demonstrate that the right ones show up.\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003eclass\u003c/span\u003e \u003cspan style=\"color: #bb0066;\"\u003eFrontEndTestCase\u003c/span\u003e(TestCase): \u003cspan style=\"color: #888888;\"\u003e# already here\u003c/span\u003e\n    \u003cspan style=\"color: #888888;\"\u003e# ...\u003c/span\u003e\n    \u003cspan style=\"color: #008800;\"\u003edef\u003c/span\u003e \u003cspan style=\"color: #0066bb;\"\u003etest_list_only_published\u003c/span\u003e(\u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e):\n        resp \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eclient\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eget(\u003cspan style=\"background-color: #fff0f0;\"\u003e'/'\u003c/span\u003e)\n        \u003cspan style=\"color: #888888;\"\u003e# the content of the rendered response is always a bytestring\u003c/span\u003e\n        resp_text \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e resp\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003econtent\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003edecode(resp\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003echarset)\n        \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eassertTrue(\u003cspan style=\"background-color: #fff0f0;\"\u003e\"Recent Posts\"\u003c/span\u003e \u003cspan style=\"color: #000000;\"\u003ein\u003c/span\u003e resp_text)\n        \u003cspan style=\"color: #008800;\"\u003efor\u003c/span\u003e count \u003cspan style=\"color: #000000;\"\u003ein\u003c/span\u003e \u003cspan style=\"color: #007020;\"\u003erange\u003c/span\u003e(\u003cspan style=\"color: #0000dd;\"\u003e1\u003c/span\u003e, \u003cspan style=\"color: #0000dd;\"\u003e11\u003c/span\u003e):\n            title \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"Post %d Title\"\u003c/span\u003e \u003cspan style=\"color: #333333;\"\u003e%\u003c/span\u003e count\n            \u003cspan style=\"color: #008800;\"\u003eif\u003c/span\u003e count \u003cspan style=\"color: #333333;\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color: #0000dd;\"\u003e6\u003c/span\u003e:\n                \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eassertContains(resp, title, count\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #0000dd;\"\u003e1\u003c/span\u003e)\n            \u003cspan style=\"color: #008800;\"\u003eelse\u003c/span\u003e:\n                \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eassertNotContains(resp, title)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eWe test first to ensure that each published post is visible in our view.\u0026nbsp;Note that we also test to ensure that the unpublished posts are\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003evisible.\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #c65d09;\"\u003e(djangoenv)$\u003c/span\u003e python manage.py \u003cspan style=\"color: #007020;\"\u003etest \u003c/span\u003eblogging\n\u003cspan style=\"color: #888888;\"\u003eCreating test database for alias 'default'...\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e.F.\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e======================================================================\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003eFAIL: test_list_only_published (blogging.tests.FrontEndTestCase)\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e...\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003eRan 3 tests in 0.024s\u003c/span\u003e\n\n\u003cspan style=\"color: #888888;\"\u003eFAILED (failures=1)\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003eDestroying test database for alias 'default'...\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cspan\u003eWe will use the QuerySet API to fetch all the posts that have\u003c/span\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003epublished_date\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cspan\u003eset.\u0026nbsp;Using the chaining nature of the API we order these posts by\u003c/span\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003epublished_date.\u0026nbsp;\u003c/span\u003e\u003c/code\u003e\u003cspan\u003eRemember, no query will have been issued to the database yet. \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eAdd the view for listing blog posts to\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eviews.py\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ciframe style=\"width: 700px; height: 405px;\" title=\"Internet Programming in Python: 07.03 The List View\" src=\"https://canvas.uw.edu/courses/1688237/external_tools/retrieve?display=borderless\u0026amp;url=https%3A%2F%2F4157763.kaf.kaltura.com%2Fbrowseandembed%2Findex%2Fmedia%2Fentryid%2F1_iskrduxc%2FshowDescription%2Ffalse%2FshowTitle%2Ffalse%2FshowTags%2Ffalse%2FshowDuration%2Ffalse%2FshowOwner%2Ffalse%2FshowUploadDate%2Ffalse%2FplayerSize%2F700x394%2FplayerSkin%2F48459823%2F%2FthumbEmbed%2F1%2F\" width=\"700px\" height=\"405px\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"geolocation *; midi *; encrypted-media *; autoplay *\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #888888;\"\u003e# add these imports\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edjango.template\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e loader\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003eblogging.models\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e Post\n\n\u003cspan style=\"color: #888888;\"\u003e# and this view\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003edef\u003c/span\u003e \u003cspan style=\"color: #0066bb;\"\u003elist_view\u003c/span\u003e(request):\n    published \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e Post\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eexclude(published_date__exact\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #008800;\"\u003eNone\u003c/span\u003e)\n    posts \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e published\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eorder_by(\u003cspan style=\"background-color: #fff0f0;\"\u003e'-published_date'\u003c/span\u003e)\n    template \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e loader\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eget_template(\u003cspan style=\"background-color: #fff0f0;\"\u003e'blogging/list.html'\u003c/span\u003e)\n    context \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e {\u003cspan style=\"background-color: #fff0f0;\"\u003e'posts'\u003c/span\u003e: posts}\n    body \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e template\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003erender(context)\n    \u003cspan style=\"color: #008800;\"\u003ereturn\u003c/span\u003e HttpResponse(body, content_type\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"text/html\"\u003c/span\u003e)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003ch3\u003eTemplates in Django\u003c/h3\u003e\n\u003cp\u003eBefore we move on, a quick word about Django templates.\u0026nbsp;\u0026nbsp;Django templates\u003cspan\u003e\u0026nbsp;contain the static parts of the desired HTML output as well as some special syntax describing how dynamic content will be inserted.\u0026nbsp;\u003c/span\u003eDjango templates\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cstrong\u003edo not\u003c/strong\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eallow any python expressions. Read more about Django templates \u003ca href=\"https://docs.djangoproject.com/en/2.1/topics/templates/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"build docutils container\"\u003e\n\u003cp\u003eOur view tries to load \u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/list.html\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eDjango is going to try to find this template\u0026nbsp;\u003cem\u003einside of a template directory\u003c/em\u003e in one of our apps, or in the mysite project template directory that we created earlier. Of course, this template is specific to blogging so we're going to want to put it inside of our blogging app's template directory. The full path of this file will be \u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/templates/blogging/list.html\u003c/span\u003e\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhy are we putting a \"blogging\" directory inside of the template folder for our blogging app?\u003c/strong\u003e Remember that we have \"list.html\" and \"detail.html\" templates in both our blogging and our polling apps. Django's template resolution system lets you override app templates. This convention helps us give those templates names that are unique across the entire Django Blog application:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe created a \"list.html\" template for our polling app.\u003c/li\u003e\n\u003cli\u003eWe placed that \"list.html\" template inside of a directory named \"polling\", in the templates directory for our polling app.\u003c/li\u003e\n\u003cli\u003eThis makes the name of our template \"polling/list.html\"\u003c/li\u003e\n\u003cli\u003eWhen Django looks for the \"polling/list.html\" template, it will look inside all of the template directories for all of the apps. It will find that template in the \"polling/templates/\" directory.\u003c/li\u003e\n\u003cli\u003eIf we wanted to, we could override this template by creating a \"mysite/templates/polling/list.html\" file. We won't do anything like that in this project, but it comes in handy when overriding templates that ship with third-party addons.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv class=\"build docutils container\"\u003e\n\u003cp\u003eSo create the \u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003etemplates/blogging\u003c/span\u003e\u003c/code\u003e directory structure inside of your blogging app, and then create a new file \u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/templates/blogging/list.html\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"highlight-jinja\"\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eextends\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"base.html\"\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eblock\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003econtent\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n  \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\n  \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003ecomment\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\u003cspan style=\"color: #888888;\"\u003e here is where the query happens \u003c/span\u003e\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eendcomment\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n  \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003efor\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003ein\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003eposts\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n  \u0026lt;div class=\"post\"\u0026gt;\n    \u0026lt;h2\u0026gt;\u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\u0026lt;/h2\u0026gt;\n    \u0026lt;p class=\"byline\"\u0026gt;\n      Posted by \u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost.author.username\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e \u0026amp;mdash; \u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost.published_date\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\n    \u0026lt;/p\u0026gt;\n    \u0026lt;div class=\"post-body\"\u0026gt;\n      \u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost.text\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\n    \u0026lt;/div\u0026gt;\n    \u0026lt;ul class=\"categories\"\u0026gt;\n      \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003efor\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003ecategory\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003ein\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost.categories.all\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n        \u0026lt;li\u0026gt;\u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003ecategory\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\u0026lt;/li\u0026gt;\n      \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eendfor\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n    \u0026lt;/ul\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eendfor\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eendblock\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eRemember in\u0026nbsp;\u003ccode\u003eviews.py\u003c/code\u003e we added\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003econtext \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e {\u003cspan style=\"background-color: #fff0f0;\"\u003e'posts'\u003c/span\u003e: posts}\nbody \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e template\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003erender(context)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eDjango templates are rendered by passing in a\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003econtext.\u0026nbsp;\u003c/em\u003eWe add our posts to that context so they can be used by the template.\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003ereturn\u003c/span\u003e HttpResponse(body, content_type\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"text/html\"\u003c/span\u003e)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eFinally, we build an HttpResponse and return it.\u0026nbsp;This is, fundamentally, no different from the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003estub_view\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ejust above.\u0026nbsp;We need to fix the url for our blog index page\u003c/p\u003e\n\u003cp\u003eUpdate\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eurls.py\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ein\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #888888;\"\u003e# import the new view\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003eblogging.views\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e list_view\n\n\u003cspan style=\"color: #888888;\"\u003e# and then update the urlconf for ''\u003c/span\u003e\npath(\u003cspan style=\"background-color: #fff0f0;\"\u003e''\u003c/span\u003e,\n    list_view,  \u003cspan style=\"color: #888888;\"\u003e#\u0026lt;-- Change this value from stub_view\u003c/span\u003e\n    name\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"blog_index\"\u003c/span\u003e),\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eThen run your tests again:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #c65d09;\"\u003e(djangoenv)$\u003c/span\u003e python manage.py \u003cspan style=\"color: #007020;\"\u003etest \u003c/span\u003eblogging\n\u003cspan style=\"color: #888888;\"\u003e...\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003eRan 3 tests in 0.033s\u003c/span\u003e\n\n\u003cspan style=\"color: #888888;\"\u003eOK\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eThis is a common pattern in Django views:\u003c/p\u003e\n\u003cul class=\"build simple\"\u003e\n\u003cli\u003eget a template from the loader\u003c/li\u003e\n\u003cli\u003ebuild a context\u003c/li\u003e\n\u003cli\u003erender the template\u003c/li\u003e\n\u003cli\u003ereturn an HttpResponse\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo common in fact that Django provides a shortcut for us to use:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003erender(request,\u0026nbsp;template[,\u0026nbsp;ctx][,\u0026nbsp;ctx_instance])\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eLet’s replace most of our view with the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003erender\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eshortcut\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edjango.shortcuts\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e render \u003cspan style=\"color: #888888;\"\u003e# \u0026lt;- already there\u003c/span\u003e\n\n\u003cspan style=\"color: #888888;\"\u003e# rewrite our view\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003edef\u003c/span\u003e \u003cspan style=\"color: #0066bb;\"\u003elist_view\u003c/span\u003e(request):\n    published \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e Post\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eexclude(published_date__exact\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #008800;\"\u003eNone\u003c/span\u003e)\n    posts \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e published\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eorder_by(\u003cspan style=\"background-color: #fff0f0;\"\u003e'-published_date'\u003c/span\u003e)\n    context \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e {\u003cspan style=\"background-color: #fff0f0;\"\u003e'posts'\u003c/span\u003e: posts}\n    \u003cspan style=\"color: #008800;\"\u003ereturn\u003c/span\u003e render(request, \u003cspan style=\"background-color: #fff0f0;\"\u003e'list.html'\u003c/span\u003e, context)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp class=\"build\"\u003eRemember though, all we did manually before is still happening.\u003c/p\u003e\n\u003cp class=\"build\"\u003eFire up your server and have a look at \u003ca href=\"http://localhost:8000/\"\u003ehttp://localhost:8000/\u003c/a\u003e. You should see a list of all your posts. Once you have this working, commit your changes.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"id2\" class=\"section\"\u003e\n\u003ch3\u003eReview\u003c/h3\u003e\n\u003cp\u003eWe’ve got the front page of our application working great.\u0026nbsp;Next, we’ll need to provide a view of a detail page for a single post.\u0026nbsp;Then we’ll provide a way to log in and to navigate between the public part of our application and the admin behind it.\u0026nbsp;If you’ve fallen behind, the app as it stands is available \u003ca class=\"instructure_file_link\" title=\"DjangoBlog_Stage2.zip\" href=\"https://canvas.uw.edu/courses/1688237/files/107485806/download?wrap=1\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1688237/files/107485806\" data-api-returntype=\"File\"\u003ehere\u003c/a\u003e. \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"our-detail-view\" class=\"section\"\u003e\n\u003ch3\u003eOur Detail View\u003c/h3\u003e\n\u003cp\u003eNext, let’s add a view function for the detail view of a post.\u0026nbsp;It will need to get the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eid\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eof the post to show as an argument.\u0026nbsp;Like the list view, it should only show published posts. Unlike the list view, it will need to return\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003esomething\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eif an unpublished post is requested.\u003c/p\u003e\n\u003cp\u003eLet’s start with the tests in\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode\u003eviews.py\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eAdd the following test to our\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eFrontEndTestCase\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ein\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/tests.py\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003e    def\u003c/span\u003e \u003cspan style=\"color: #0066bb;\"\u003etest_details_only_published\u003c/span\u003e(\u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e):\n        \u003cspan style=\"color: #008800;\"\u003efor\u003c/span\u003e count \u003cspan style=\"color: #000000;\"\u003ein\u003c/span\u003e \u003cspan style=\"color: #007020;\"\u003erange\u003c/span\u003e(\u003cspan style=\"color: #0000dd;\"\u003e1\u003c/span\u003e, \u003cspan style=\"color: #0000dd;\"\u003e11\u003c/span\u003e):\n            title \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"Post %d Title\"\u003c/span\u003e \u003cspan style=\"color: #333333;\"\u003e%\u003c/span\u003e count\n            post \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e Post\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eget(title\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003etitle)\n            resp \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eclient\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eget(\u003cspan style=\"background-color: #fff0f0;\"\u003e'/posts/%d/'\u003c/span\u003e \u003cspan style=\"color: #333333;\"\u003e%\u003c/span\u003e post\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003epk)\n            \u003cspan style=\"color: #008800;\"\u003eif\u003c/span\u003e count \u003cspan style=\"color: #333333;\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color: #0000dd;\"\u003e6\u003c/span\u003e:\n                \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eassertEqual(resp\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003estatus_code, \u003cspan style=\"color: #0000dd;\"\u003e200\u003c/span\u003e)\n                \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eassertContains(resp, title)\n            \u003cspan style=\"color: #008800;\"\u003eelse\u003c/span\u003e:\n                \u003cspan style=\"color: #007020;\"\u003eself\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eassertEqual(resp\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003estatus_code, \u003cspan style=\"color: #0000dd;\"\u003e404\u003c/span\u003e)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eThen run your tests:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #c65d09;\"\u003e(djangoenv)$\u003c/span\u003e python manage.py \u003cspan style=\"color: #007020;\"\u003etest \u003c/span\u003eblogging\n\u003cspan style=\"color: #888888;\"\u003eCreating test database for alias 'default'...\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e.F..\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e======================================================================\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003eFAIL: test_details_only_published (blogging.tests.FrontEndTestCase)\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003e...\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003eRan 4 tests in 0.043s\u003c/span\u003e\n\n\u003cspan style=\"color: #888888;\"\u003eFAILED (failures=1)\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003eDestroying test database for alias 'default'...\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eNow, add a new view to\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/views.py\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003ciframe style=\"width: 700px; height: 405px;\" title=\"Internet Programming in Python: 07.04 The Detail View\" src=\"https://canvas.uw.edu/courses/1688237/external_tools/retrieve?display=borderless\u0026amp;url=https%3A%2F%2F4157763.kaf.kaltura.com%2Fbrowseandembed%2Findex%2Fmedia%2Fentryid%2F1_x5gyk9ut%2FshowDescription%2Ffalse%2FshowTitle%2Ffalse%2FshowTags%2Ffalse%2FshowDuration%2Ffalse%2FshowOwner%2Ffalse%2FshowUploadDate%2Ffalse%2FplayerSize%2F700x394%2FplayerSkin%2F48459823%2F%2FthumbEmbed%2F1%2F\" width=\"700px\" height=\"405px\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"geolocation *; midi *; encrypted-media *; autoplay *\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #008800;\"\u003edef\u003c/span\u003e \u003cspan style=\"color: #0066bb;\"\u003edetail_view\u003c/span\u003e(request, post_id):\n    published \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e Post\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eexclude(published_date__exact\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"color: #008800;\"\u003eNone\u003c/span\u003e)\n    \u003cspan style=\"color: #008800;\"\u003etry\u003c/span\u003e:\n        post \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e published\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eget(pk\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003epost_id)\n    \u003cspan style=\"color: #008800;\"\u003eexcept\u003c/span\u003e Post\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eDoesNotExist:\n        \u003cspan style=\"color: #008800;\"\u003eraise\u003c/span\u003e Http404\n    context \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e {\u003cspan style=\"background-color: #fff0f0;\"\u003e'post'\u003c/span\u003e: post}\n    \u003cspan style=\"color: #008800;\"\u003ereturn\u003c/span\u003e render(request, \u003cspan style=\"background-color: #fff0f0;\"\u003e'blogging/detail.html'\u003c/span\u003e, context)\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eOne of the features of the Django ORM is that all models raise a DoesNotExist exception if\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eget\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ereturns nothing.\u0026nbsp;This exception is actually an attribute of the Model you look for.\u0026nbsp;There’s also an\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eObjectDoesNotExist\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003efor when you don’t know which model you have.\u0026nbsp;We can use that fact to raise a Not Found exception.\u0026nbsp;Django will handle the rest for us.\u003c/p\u003e\n\u003cp\u003eWe also need to add\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003edetail.html\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eto\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/templates/blogging/\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eextends\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"base.html\"\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\n\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eblock\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003econtent\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u0026lt;a class=\"backlink\" href=\"/\"\u0026gt;Home\u0026lt;/a\u0026gt;\n\u0026lt;h1\u0026gt;\u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\u0026lt;/h1\u0026gt;\n\u0026lt;p class=\"byline\"\u0026gt;\n  Posted by \u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost.author.username\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e \u0026amp;mdash; \u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost.published_date\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\n\u0026lt;/p\u0026gt;\n\u0026lt;div class=\"post-body\"\u0026gt;\n  \u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost.text\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\n\u0026lt;/div\u0026gt;\n\u0026lt;ul class=\"categories\"\u0026gt;\n  \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003efor\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003ecategory\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003ein\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost.categories.all\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n    \u0026lt;li\u0026gt;\u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003ecategory\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\u0026lt;/li\u0026gt;\n  \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eendfor\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u0026lt;/ul\u0026gt;\n\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eendblock\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eIn order to view a single post, we’ll need a link from the list view\u003c/p\u003e\n\u003cp\u003eWe can use the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eurl\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003etemplate tag:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eurl\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e'\u0026lt;view_name\u0026gt;'\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003earg1\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003earg2\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eIn our \u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/list.html\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003etemplate, let’s link the post titles:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003efor\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003ein\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003eposts\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u0026lt;div class=\"post\"\u0026gt;\n  \u0026lt;h2\u0026gt;             \u0026lt;!-- Replace the existing \u0026lt;h2\u0026gt;...\u0026lt;/h2\u0026gt; tag --\u0026gt;\n    \u0026lt;a href=\"\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eurl\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e'blog_detail'\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost.pk\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\"\u0026gt;\u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003epost\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\u0026lt;/a\u0026gt;\n  \u0026lt;/h2\u0026gt;\n  ...\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eAgain, we need to insert our new view into the existing\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging/urls.py\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ein\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #888888;\"\u003e# import the view\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003eblogging.views\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e detail_view\n\npath(\u003cspan style=\"background-color: #fff0f0;\"\u003e'posts/\u0026lt;int:post_id\u0026gt;/'\u003c/span\u003e,\n    detail_view, \u003cspan style=\"color: #888888;\"\u003e#\u0026lt;-- Change this from stub_view\u003c/span\u003e\n    name\u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e\u003cspan style=\"background-color: #fff0f0;\"\u003e\"blog_detail\"\u003c/span\u003e),\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eThen run your tests:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #c65d09;\"\u003e(djangoenv)$\u003c/span\u003e python manage.py \u003cspan style=\"color: #007020;\"\u003etest \u003c/span\u003eblogging\n\u003cspan style=\"color: #888888;\"\u003e...\u003c/span\u003e\n\u003cspan style=\"color: #888888;\"\u003eRan 4 tests in 0.077s\u003c/span\u003e\n\n\u003cspan style=\"color: #888888;\"\u003eOK\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eWe’ve got some good stuff to look at now. Fire up the server and reload your blog index page and click around a bit.\u0026nbsp;You can now move back and forth between list and detail view.\u0026nbsp;Try loading the detail view for a post that doesn’t exist.\u0026nbsp;\u003c/p\u003e\n\u003cp\u003eYou’ve got a functional blog!\u003c/p\u003e\n\u003cdiv class=\"build docutils container\"\u003e\n\u003cp\u003eIt’s not very pretty, though.\u0026nbsp;We can fix that by adding some CSS.\u0026nbsp;This gives us a chance to learn about Django’s handling of\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003estatic files.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOnce you have this working, commit your changes.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"static-files\" class=\"section\"\u003e\n\u003ch3\u003eStatic Files\u003c/h3\u003e\n\u003cp\u003eLike templates, Django expects to find static files in particular locations.\u0026nbsp;It will look for them in a directory named\u003c/p\u003e\n\u003ccode\u003estatic\u003c/code\u003e in any installed apps.\u0026nbsp;They will be served from the URL path in the STATIC_URL setting.\u0026nbsp;By default, this is\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003e/static/. T\u003c/span\u003e\u003c/code\u003eo allow Django to automatically build the correct URLs for your static files, you use a special\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003etemplate tag\u003c/em\u003e:\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003estatic\u003c/span\u003e \u003cspan style=\"color: #333333;\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color: #996633;\"\u003efilename\u003c/span\u003e\u003cspan style=\"color: #333333;\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eWe have prepared a CSS file for us to use, available at: \u003ca id=\"72594805\" class=\"instructure_file_link inline_disabled\" href=\"https://canvas.uw.edu/courses/1688237/files/107485833?wrap=1\" target=\"_blank\" data-api-endpoint=\"https://canvas.uw.edu/api/v1/courses/1688237/files/107485833\" data-api-returntype=\"File\"\u003edjango_blog.css\u003c/a\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003eCreate a new directory\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003estatic\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ein the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003eblogging\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eapp.\u003c/p\u003e\n\u003cp\u003eCopy the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003edjango_blog.css\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003efile into that new directory.\u003c/p\u003e\n\u003cp\u003eNext, load the static files template tag into\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003ebase.html\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003e(this\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cstrong\u003emust\u003c/strong\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ebe on the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003efirst line\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eof the template):\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eload\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003estatic\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eFinally, add a link to the stylesheet using the special template tag:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u0026lt;title\u0026gt;My Django Blog\u0026lt;/title\u0026gt; \u0026lt;!-- This is already present --\u0026gt;\n\u0026lt;link type=\"text/css\" rel=\"stylesheet\" href=\"\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003estatic\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e'django_blog.css'\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\"\u0026gt;\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eReload\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ca class=\"reference external\" href=\"http://localhost:8000/\"\u003ehttp://localhost:8000/\u003c/a\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eand view the results of your work.\u0026nbsp;We now have a reasonable view of the posts of our blog on the front end and we have a way to create and categorize posts using the admin. However, we lack a way to move between the two.\u0026nbsp;Let’s add that ability next.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eOnce you have this working, commit your changes.\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv id=\"global-navigation\" class=\"section\"\u003e\n\u003ch3\u003eGlobal Navigation\u003c/h3\u003e\n\u003cp\u003eWe’ll start by adding a control bar to our\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003ebase.html\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003etemplate:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eload\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003estaticfiles\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u0026lt;!DOCTYPE html\u0026gt;  ...\n \u0026lt;body\u0026gt; \u0026nbsp; \n  \u0026lt;div id=\"header\"\u0026gt;  \u003cspan style=\"color: #888888;\"\u003e{# header begins here #}\u003c/span\u003e\n   \u0026lt;ul id=\"control-bar\"\u0026gt;\n   \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eif\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003euser.is_authenticated\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n    \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eif\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003euser.is_staff\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\u0026lt;li\u0026gt;\u0026lt;a href=\"\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eurl\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e'admin:index'\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\"\u0026gt;admin\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eendif\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n     \u0026lt;li\u0026gt;\u0026lt;a href=\"\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eurl\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e'logout'\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\"\u0026gt;logout\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eelse\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n     \u0026lt;li\u0026gt;\u0026lt;a href=\"\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eurl\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e'login'\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\"\u0026gt;login\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n   \u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eendif\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n   \u0026lt;/ul\u0026gt;\n  \u0026lt;/div\u0026gt;              \u003cspan style=\"color: #888888;\"\u003e{# header ends here #}\u003c/span\u003e\n\u0026lt;div id=\"container\"\u0026gt;  ...\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eWhen we set up our views, we used the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003erender\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eshortcut\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003e.\u0026nbsp;\u003c/span\u003e\u003c/code\u003eThis gives us access to\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003euser\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ein our templates.\u0026nbsp;It provides access to methods about the state and rights of that user.\u0026nbsp;We can use these to conditionally display links or UI elements. Like only showing the admin link to staff members.\u0026nbsp;Django also provides a reasonable set of views for login/logout.\u0026nbsp;The first step to using them is to hook them into a urlconf.\u003c/p\u003e\n\u003cp\u003eAdd the following to\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003emysite/urls.py\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #888888;\"\u003e# add an import at the top\u003c/span\u003e\n\u003cspan style=\"color: #008800;\"\u003efrom\u003c/span\u003e \u003cspan style=\"color: #0e84b5;\"\u003edjango.contrib.auth.views\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eimport\u003c/span\u003e LoginView, LogoutView\n\n\u003cspan style=\"color: #888888;\"\u003e# and update the list of urlconfs\u003c/span\u003e\n    path(\u003cspan style=\"background-color: #fff0f0;\"\u003e''\u003c/span\u003e, include(\u003cspan style=\"background-color: #fff0f0;\"\u003e'blogging.urls'\u003c/span\u003e)),  \u003cspan style=\"color: #888888;\"\u003e# \u0026lt;- already there\u003cbr\u003e \u0026nbsp; \u0026nbsp;path(\u003cspan style=\"background-color: #fff0f0;\"\u003e'polling/'\u003c/span\u003e, include(\u003cspan style=\"background-color: #fff0f0;\"\u003e'polling.urls'\u003c/span\u003e)), # \u0026lt;- already there\u003c/span\u003e\n    path(\u003cspan style=\"background-color: #fff0f0;\"\u003e'admin/'\u003c/span\u003e, admin\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003esite\u003cspan style=\"color: #333333;\"\u003e.\u003c/span\u003eurls),   \u003cspan style=\"color: #888888;\"\u003e# \u0026lt;- already there\u003c/span\u003e\u003cspan style=\"color: #888888;\"\u003e\u003cbr\u003e\u003c/span\u003e    path('login/', LoginView.as_view(template_name='login.html'), name=\"login\"),\u003cbr\u003e    path('logout/', LogoutView.as_view(next_page='/'), name=\"logout\"),\u003cbr\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eWe need to create a new\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003elogin.html\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003etemplate in\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003emysite/templates\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003e\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eextends\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e\"base.html\"\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\n\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eblock\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003econtent\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u0026lt;h1\u0026gt;My Blog Login\u0026lt;/h1\u0026gt;\n\u0026lt;form action=\"\" method=\"POST\"\u0026gt;\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003ecsrf_token\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n  \u003cspan style=\"color: #557799;\"\u003e{{\u003c/span\u003e \u003cspan style=\"color: #996633;\"\u003eform.as_p\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e}}\u003c/span\u003e\n  \u0026lt;p\u0026gt;\u0026lt;input type=\"submit\" value=\"Log In\"\u0026gt;\u0026lt;/p\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003cspan style=\"color: #557799;\"\u003e{%\u003c/span\u003e \u003cspan style=\"color: #008800;\"\u003eendblock\u003c/span\u003e \u003cspan style=\"color: #557799;\"\u003e%}\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eIn a web application, submitting forms is potentially hazardous.\u0026nbsp;Data is being sent to our application from some remote place.\u0026nbsp;If that data is going to alter the state of our application, we\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cstrong\u003emust\u003c/strong\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003euse POST.\u0026nbsp;Even so, we are vulnerable to Cross-Site Request Forgery, a common attack vector.\u0026nbsp;Django provides a convenient system to fight this.\u0026nbsp;In fact, for POST requests, it\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cem\u003erequires\u003c/em\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003ethat you use it.\u0026nbsp;The Django middleware that does this is enabled by default.\u0026nbsp;All you need to do is include the\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003e{%\u003c/span\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cspan class=\"pre\"\u003ecsrf_token\u003c/span\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003cspan class=\"pre\"\u003e%}\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003etag in your form.\u003c/p\u003e\n\u003cp\u003eFinally, in\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ccode class=\"docutils literal\"\u003e\u003cspan class=\"pre\"\u003esettings.py\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026nbsp;\u003c/span\u003eadd the following to the end:\u003c/p\u003e\n\u003cdiv style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\"\u003e\n\u003cpre style=\"margin: 0; line-height: 125%;\"\u003eLOGIN_URL \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e'/login/'\u003c/span\u003e\nLOGIN_REDIRECT_URL \u003cspan style=\"color: #333333;\"\u003e=\u003c/span\u003e \u003cspan style=\"background-color: #fff0f0;\"\u003e'/'\u003c/span\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eIn adding a login view, we’ve gotten a sneak peek at how forms work in Django.\u0026nbsp;However, learning more about them is beyond what we can achieve in this session.\u0026nbsp;The form system in Django is quite nice, however. We urge you to\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ca class=\"reference external\" href=\"https://docs.djangoproject.com/en/2.1/topics/forms/\"\u003eread more about it\u003c/a\u003e.\u0026nbsp;In particular, you might want to pay attention to the documentation on\u003cspan\u003e\u0026nbsp;\u003c/span\u003e\u003ca href=\"https://docs.djangoproject.com/en/2.1/topics/forms/modelforms/\"\u003eModel Forms\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe now have a workable, simple blog app in Django! If you fell behind at some point, the app as it now stands is available in the class GitHub repository.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eOnce you have this working, commit your changes.\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e"},"WIKI_PAGE_REVISION":"1","WIKI_PAGE_SHOW_PATH":"/courses/1688237/pages/lesson-07-content","WIKI_PAGE_EDIT_PATH":"/courses/1688237/pages/lesson-07-content/edit","WIKI_PAGE_HISTORY_PATH":"/courses/1688237/pages/lesson-07-content/revisions","COURSE_ID":"1688237","MODULES_PATH":"/courses/1688237/modules","wiki_page_menu_tools":[],"wiki_index_menu_tools":[],"DISPLAY_SHOW_ALL_LINK":false,"CAN_SET_TODO_DATE":false,"TITLE_AVAILABILITY_PATH":"/api/v1/courses/1688237/page_title_availability","badge_counts":{"submissions":11},"notices":[],"active_context_tab":"pages"};
    BRANDABLE_CSS_HANDLEBARS_INDEX = [["new_styles_normal_contrast","new_styles_high_contrast","new_styles_normal_contrast_rtl","new_styles_high_contrast_rtl"],{"10":["8300658022",0,"250b5824c2",2],"15":["fc26aa5fd4",0,"f904416063",2],"19":["df5777ed9c"],"61":["f3934dab06","f405852bb2","ee5810890b","3fd9943b9a"],"67":["8b57f54e71",0,"43833dde85",2],"71":["35b89b103a","4304be7d41","58dbfc2651","2932678b1c"],"06":["cb9f63cba6",0,"2be010fc14",2],"f0":["7c947dce20",0,0,0],"c8":["12d5e4d1e8","9f7b02d283","4ebd280f3e","b547456f4c"],"1e":["02e336724a","d7bb142b0a","d7ac7fdfb8","c03b9b261e"],"b3":["8ebc71ebc3","cf8efa05c8","4efdc93a21","fd6d3a9780"],"0c":["c26e82abac",0,"b71e9cbd6d",2],"da":["efb9fe6d7c","edbd1b5e83","a6dc56afb7","dfb2d13098"],"1d":["a3bfcb7961",0,"90682b3bbe",2],"08":["64bff5a97d"],"e2":["11429f119a"],"9f":["35936a18c3",0,0,0],"2b":["abf63f48ef","bf8e135ffe","378e0c136b","9833e305e6"],"2c":["6d919206cd",0,0,0],"c2":["6f2721ae01"],"9c":["ecafc938e4",0,"59e7c22304",2],"c5":["ebf0e1382f","7f587d9a8a","afbdabf23d","0d398196a8"],"f2":["51574f9b13"]}]
;
  </script>

  <link rel="preload" href="./django_blog_files/variables-7dd4b80918af0e0218ec0229e4bd5873.js.download" as="script" type="text/javascript"><link rel="preload" href="./django_blog_files/Los_Angeles-6699c54112.js.download" as="script" type="text/javascript"><link rel="preload" href="./django_blog_files/Los_Angeles-6699c54112.js.download" as="script" type="text/javascript"><link rel="preload" href="./django_blog_files/en_US-80a0ce259b.js.download" as="script" type="text/javascript"><link rel="preload" href="./django_blog_files/main-e-cb096ce996.js.download" as="script" type="text/javascript" crossorigin="anonymous"><script>
//<![CDATA[

      ;["https://du11hjcvx0uqb.cloudfront.net/dist/brandable_css/bc375d9c18002194f6c0158bfa87b14a/variables-7dd4b80918af0e0218ec0229e4bd5873.js", "https://du11hjcvx0uqb.cloudfront.net/dist/timezone/America/Los_Angeles-6699c54112.js", "https://du11hjcvx0uqb.cloudfront.net/dist/timezone/America/Los_Angeles-6699c54112.js", "https://du11hjcvx0uqb.cloudfront.net/dist/timezone/en_US-80a0ce259b.js"].forEach(function(src) {
        var s = document.createElement('script'); s.src = src; s.async = false;
        document.head.appendChild(s)
      });
//]]>
</script><script src="./django_blog_files/variables-7dd4b80918af0e0218ec0229e4bd5873.js.download"></script><script src="./django_blog_files/Los_Angeles-6699c54112.js.download"></script><script src="./django_blog_files/Los_Angeles-6699c54112.js.download"></script><script src="./django_blog_files/en_US-80a0ce259b.js.download"></script><script>
//<![CDATA[

      ;["https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/main-e-cb096ce996.js"].forEach(function(src) {
        var s = document.createElement('script'); s.src = src; s.async = false; s.crossOrigin = 'anonymous';
        document.head.appendChild(s)
      });
//]]>
</script><script src="./django_blog_files/main-e-cb096ce996.js.download" crossorigin="anonymous"></script><link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/wiki_page_show-c-50da10faa0.js" as="script" type="text/javascript"><link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/navigation_header-c-c0691b61ec.js" as="script" type="text/javascript"><script>
//<![CDATA[
(window.bundles || (window.bundles = [])).push('wiki_page_show');
(window.bundles || (window.bundles = [])).push('navigation_header');
//]]>
</script>
  <title>Lesson 07 Content: PYTHON 330 B Au 23: Internet Programming With Python</title>



    <script type="text/javascript">
      window.heap=window.heap||[],heap.load=function(e,t){window.heap.appid=e,window.heap.config=t=t||{};var r=document.createElement("script");r.type="text/javascript",r.async=!0,r.src="https://cdn.heapanalytics.com/js/heap-"+e+".js";var a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(r,a);for(var n=function(e){return function(){heap.push([e].concat(Array.prototype.slice.call(arguments,0)))}},p=["addEventProperties","addUserProperties","clearEventProperties","identify","resetIdentity","removeEventProperty","setEventProperties","track","unsetEventProperty"],o=0;o<p.length;o++)heap[p[o]]=n(p[o])};
      heap.load("3001039959");
      setTimeout(() => {
        if (ENV.current_user_heap_id && ENV.current_user_heap_id !== heap.identity) {
          heap.identify(ENV.current_user_heap_id);
        }
        props = {}
        if (ENV.current_user_roles) {
          props['role'] = ENV.current_user_roles[ENV.current_user_roles.length - 1]
        }
        if (ENV.DOMAIN_ROOT_ACCOUNT_UUID) {
          props['Canvas.accountId'] = ENV.DOMAIN_ROOT_ACCOUNT_UUID
        }
        if (ENV.DOMAIN_ROOT_ACCOUNT_SFID) {
          props['Canvas.salesforceAccountId'] = ENV.DOMAIN_ROOT_ACCOUNT_SFID
        }
        if (Object.keys(props).length > 0) {
          heap.addUserProperties(props);
        }
      }, 1000);
    </script>

<script src="./django_blog_files/canvas-default.js.download"></script><script src="./django_blog_files/custom.js.download"></script><style type="text/css"></style><link rel="stylesheet" type="text/css" href="./django_blog_files/canvas.2bbf72f6a38ea490106756a27c97bc95.css"><style type="text/css">.mejs-offscreen{clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);clip-path:polygon(0px 0,0 0,0 0,0 0);position:absolute!important;height:1px;width:1px;overflow:hidden}.mejs-container{position:relative;background:#000;font-family:Helvetica,Arial,serif;text-align:left;vertical-align:top;text-indent:0}.mejs-fill-container,.mejs-fill-container .mejs-container{width:100%;height:100%}.mejs-fill-container{overflow:hidden}.mejs-container:focus{outline:0}.me-plugin{position:absolute}.mejs-embed,.mejs-embed body{width:100%;height:100%;margin:0;padding:0;background:#000;overflow:hidden}.mejs-fullscreen{overflow:hidden!important}.mejs-container-fullscreen{position:fixed;left:0;top:0;right:0;bottom:0;overflow:hidden;z-index:1000}.mejs-container-fullscreen .mejs-mediaelement,.mejs-container-fullscreen video{width:100%;height:100%}.mejs-clear{clear:both}.mejs-background{position:absolute;top:0;left:0}.mejs-mediaelement{position:absolute;top:0;left:0;width:100%;height:100%}.mejs-poster{position:absolute;top:0;left:0;background-size:contain;background-position:50% 50%;background-repeat:no-repeat}:root .mejs-poster img{display:none}.mejs-poster img{border:0;padding:0}.mejs-overlay{position:absolute;top:0;left:0}.mejs-overlay-play{cursor:pointer}.mejs-overlay-button{position:absolute;top:50%;left:50%;width:100px;height:100px;margin:-50px 0 0 -50px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/746c3af7a145a09239a36e5ef61cfea0.svg) no-repeat}.no-svg .mejs-overlay-button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/716436fb3df0d29e6b37dd62d952676a.png)}.mejs-overlay:hover .mejs-overlay-button{background-position:0 -100px}.mejs-overlay-loading{position:absolute;top:50%;left:50%;width:80px;height:80px;margin:-40px 0 0 -40px;background:#333;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.9);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.9)),to(rgba(0,0,0,.9)));background:-webkit-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-moz-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-o-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:-ms-linear-gradient(top,rgba(50,50,50,.9),rgba(0,0,0,.9));background:linear-gradient(rgba(50,50,50,.9),rgba(0,0,0,.9))}.mejs-overlay-loading span{display:block;width:80px;height:80px;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/76b326f4d44222126fee21076595bef5.gif) 50% 50% no-repeat}.mejs-container .mejs-controls{position:absolute;list-style-type:none;margin:0;padding:0;bottom:0;left:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));height:30px;width:100%}.mejs-container .mejs-controls div{list-style-type:none;background-image:none;display:block;float:left;margin:0;padding:0;width:26px;height:26px;font-size:11px;line-height:11px;font-family:Helvetica,Arial,serif;border:0}.mejs-controls .mejs-button button{cursor:pointer;display:block;font-size:0;line-height:0;text-decoration:none;margin:7px 5px;padding:0;position:absolute;height:16px;width:16px;border:0;background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/40f56f5a736da4effeb790cedb8a52f0.svg) no-repeat}.no-svg .mejs-controls .mejs-button button{background-image:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/24a0227fbdd3acfd86ff03fc3fc6c8a4.png)}.mejs-controls .mejs-button button:focus{outline:dotted 1px #999}.mejs-container .mejs-controls .mejs-time{color:#fff;display:block;height:17px;width:auto;padding:10px 3px 0;overflow:hidden;text-align:center;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}.mejs-container .mejs-controls .mejs-time a{color:#fff;font-size:11px;line-height:12px;display:block;float:left;margin:1px 2px 0 0;width:auto}.mejs-controls .mejs-play button{background-position:0 0}.mejs-controls .mejs-pause button{background-position:0 -16px}.mejs-controls .mejs-stop button{background-position:-112px 0}.mejs-controls div.mejs-time-rail{direction:ltr;width:200px;padding-top:5px}.mejs-controls .mejs-time-rail span,.mejs-controls .mejs-time-rail a{display:block;position:absolute;width:180px;height:10px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;cursor:pointer}.mejs-controls .mejs-time-rail .mejs-time-total{margin:5px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-time-rail .mejs-time-buffering{width:100%;background-image:-o-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,.15)),color-stop(0.75,rgba(255,255,255,.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-ms-linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(-45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:15px 15px;-moz-background-size:15px 15px;-o-background-size:15px 15px;background-size:15px 15px;-webkit-animation:buffering-stripes 2s linear infinite;-moz-animation:buffering-stripes 2s linear infinite;-ms-animation:buffering-stripes 2s linear infinite;-o-animation:buffering-stripes 2s linear infinite;animation:buffering-stripes 2s linear infinite}@-webkit-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-moz-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-ms-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@-o-keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}@keyframes buffering-stripes{from{background-position:0 0}to{background-position:30px 0}}.mejs-controls .mejs-time-rail .mejs-time-loaded{background:#3caac8;background:rgba(60,170,200,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(44,124,145,.8)),to(rgba(78,183,212,.8)));background:-webkit-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-moz-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-o-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:-ms-linear-gradient(top,rgba(44,124,145,.8),rgba(78,183,212,.8));background:linear-gradient(rgba(44,124,145,.8),rgba(78,183,212,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-current{background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8));width:0}.mejs-controls .mejs-time-rail .mejs-time-handle{display:none;position:absolute;margin:0;width:10px;background:#fff;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px;cursor:pointer;border:solid 2px #333;top:-2px;text-align:center}.mejs-controls .mejs-time-rail .mejs-time-float{position:absolute;display:none;background:#eee;width:36px;height:17px;border:solid 1px #333;top:-26px;margin-left:-18px;text-align:center;color:#111}.mejs-controls .mejs-time-rail .mejs-time-float-current{margin:2px;width:30px;display:block;text-align:center;left:0}.mejs-controls .mejs-time-rail .mejs-time-float-corner{position:absolute;display:block;width:0;height:0;line-height:0;border:solid 5px #eee;border-color:#eee transparent transparent;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:15px;left:13px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float{width:48px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-current{width:44px}.mejs-long-video .mejs-controls .mejs-time-rail .mejs-time-float-corner{left:18px}.mejs-controls .mejs-fullscreen-button button{background-position:-32px 0}.mejs-controls .mejs-unfullscreen button{background-position:-32px -16px}.mejs-controls .mejs-volume-button{}.mejs-controls .mejs-mute button{background-position:-16px -16px}.mejs-controls .mejs-unmute button{background-position:-16px 0}.mejs-controls .mejs-volume-button{position:relative}.mejs-controls .mejs-volume-button .mejs-volume-slider{height:115px;width:25px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;top:-115px;left:0;z-index:1;position:absolute;margin:0}.mejs-controls .mejs-volume-button:hover{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-total{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.5);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-current{position:absolute;left:11px;top:8px;width:2px;height:100px;background:#ddd;background:rgba(255,255,255,.9);margin:0}.mejs-controls .mejs-volume-button .mejs-volume-slider .mejs-volume-handle{position:absolute;left:4px;top:-3px;width:16px;height:6px;background:#ddd;background:rgba(255,255,255,.9);cursor:N-resize;-webkit-border-radius:1px;-moz-border-radius:1px;border-radius:1px;margin:0}.mejs-controls a.mejs-horizontal-volume-slider{height:26px;width:56px;position:relative;display:block;float:left;vertical-align:middle}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-total{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#333;background:rgba(50,50,50,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(30,30,30,.8)),to(rgba(60,60,60,.8)));background:-webkit-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-moz-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-o-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:-ms-linear-gradient(top,rgba(30,30,30,.8),rgba(60,60,60,.8));background:linear-gradient(rgba(30,30,30,.8),rgba(60,60,60,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-current{position:absolute;left:0;top:11px;width:50px;height:8px;margin:0;padding:0;font-size:1px;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;background:#fff;background:rgba(255,255,255,.8);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(255,255,255,.9)),to(rgba(200,200,200,.8)));background:-webkit-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-moz-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-o-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:-ms-linear-gradient(top,rgba(255,255,255,.9),rgba(200,200,200,.8));background:linear-gradient(rgba(255,255,255,.9),rgba(200,200,200,.8))}.mejs-controls .mejs-horizontal-volume-slider .mejs-horizontal-volume-handle{display:none}.mejs-controls .mejs-captions-button{position:relative}.mejs-controls .mejs-captions-button button{background-position:-48px 0}.mejs-controls .mejs-captions-button .mejs-captions-selector{position:absolute;bottom:26px;right:-51px;width:85px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px 10px 0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-captions-button .mejs-captions-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-captions-button .mejs-captions-selector ul li label{width:55px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-controls .mejs-captions-button .mejs-captions-translations{font-size:10px;margin:0 0 5px}.mejs-chapters{position:absolute;top:0;left:0;border-right:solid 1px #fff;width:10000px;z-index:1}.mejs-chapters .mejs-chapter{position:absolute;float:left;background:#222;background:rgba(0,0,0,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(50,50,50,.7)),to(rgba(0,0,0,.7)));background:-webkit-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-moz-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-o-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:-ms-linear-gradient(top,rgba(50,50,50,.7),rgba(0,0,0,.7));background:linear-gradient(rgba(50,50,50,.7),rgba(0,0,0,.7));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#323232, endColorstr=#000000);overflow:hidden;border:0}.mejs-chapters .mejs-chapter .mejs-chapter-block{font-size:11px;color:#fff;padding:5px;display:block;border-right:solid 1px #333;border-bottom:solid 1px #333;cursor:pointer}.mejs-chapters .mejs-chapter .mejs-chapter-block-last{border-right:0}.mejs-chapters .mejs-chapter .mejs-chapter-block:hover{background:#666;background:rgba(102,102,102,.7);background:-webkit-gradient(linear,0 0,0 100%,from(rgba(102,102,102,.7)),to(rgba(50,50,50,.6)));background:-webkit-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-moz-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-o-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:-ms-linear-gradient(top,rgba(102,102,102,.7),rgba(50,50,50,.6));background:linear-gradient(rgba(102,102,102,.7),rgba(50,50,50,.6));filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=0, startColorstr=#666666, endColorstr=#323232)}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-title{font-size:12px;font-weight:700;display:block;white-space:nowrap;text-overflow:ellipsis;margin:0 0 3px;line-height:12px}.mejs-chapters .mejs-chapter .mejs-chapter-block .ch-timespan{font-size:12px;line-height:12px;margin:3px 0 4px;display:block;white-space:nowrap;text-overflow:ellipsis}.mejs-captions-layer{position:absolute;bottom:0;left:0;text-align:center;line-height:20px;font-size:16px;color:#fff}.mejs-captions-layer a{color:#fff;text-decoration:underline}.mejs-captions-layer[lang=ar]{font-size:20px;font-weight:400}.mejs-captions-position{position:absolute;width:100%;bottom:15px;left:0}.mejs-captions-position-hover{bottom:35px}.mejs-captions-text,.mejs__captions-text *{padding:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(20,20,20,.5);white-space:pre-wrap;-webkit-box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5);box-shadow:5px 0 0 rgba(20,20,20,.5),-5px 0 0 rgba(20,20,20,.5)}.me-cannotplay{}.me-cannotplay a{color:#fff;font-weight:700}.me-cannotplay span{padding:15px;display:block}.mejs-controls .mejs-loop-off button{background-position:-64px -16px}.mejs-controls .mejs-loop-on button{background-position:-64px 0}.mejs-controls .mejs-backlight-off button{background-position:-80px -16px}.mejs-controls .mejs-backlight-on button{background-position:-80px 0}.mejs-controls .mejs-picturecontrols-button{background-position:-96px 0}.mejs-contextmenu{position:absolute;width:150px;padding:10px;border-radius:4px;top:0;left:0;background:#fff;border:solid 1px #999;z-index:1001}.mejs-contextmenu .mejs-contextmenu-separator{height:1px;font-size:0;margin:5px 6px;background:#333}.mejs-contextmenu .mejs-contextmenu-item{font-family:Helvetica,Arial,serif;font-size:12px;padding:4px 6px;cursor:pointer;color:#333}.mejs-contextmenu .mejs-contextmenu-item:hover{background:#2C7C91;color:#fff}.mejs-controls .mejs-sourcechooser-button{position:relative}.mejs-controls .mejs-sourcechooser-button button{background-position:-128px 0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector{position:absolute;bottom:26px;right:-10px;width:130px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:10px;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li{margin:0 0 6px;padding:0;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-sourcechooser-button .mejs-sourcechooser-selector ul li label{width:100px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:10px}.mejs-postroll-layer{position:absolute;bottom:0;left:0;width:100%;height:100%;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);z-index:1000;overflow:hidden}.mejs-postroll-layer-content{width:100%;height:100%}.mejs-postroll-close{position:absolute;right:0;top:0;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);color:#fff;padding:4px;z-index:100;cursor:pointer}div.mejs-speed-button{width:46px!important;position:relative}.mejs-controls .mejs-button.mejs-speed-button button{background:transparent;width:36px;font-size:11px;line-height:normal;color:#fff}.mejs-controls .mejs-speed-button .mejs-speed-selector{position:absolute;top:-100px;left:-10px;width:60px;height:100px;background:url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/703c659e4bf563a05c6338a1727e006c.png);background:rgba(50,50,50,.7);border:solid 1px transparent;padding:0;overflow:hidden;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label.mejs-speed-selected{color:rgba(33,248,248,1)}.mejs-controls .mejs-speed-button .mejs-speed-selector ul{margin:0;padding:0;display:block;list-style-type:none!important;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li{margin:0 0 6px;padding:0 10px;list-style-type:none!important;display:block;color:#fff;overflow:hidden}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li input{clear:both;float:left;margin:3px 3px 0 5px}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li label{width:60px;float:left;padding:4px 0 0;line-height:15px;font-family:Helvetica,Arial,serif;font-size:11px;color:#fff;margin-left:5px;cursor:pointer}.mejs-controls .mejs-speed-button .mejs-speed-selector ul li:hover{background-color:#c8c8c8!important;background-color:rgba(255,255,255,.4)!important}.mejs-controls .mejs-button.mejs-jump-forward-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/15e1ac8cbacc2efdf1ac2677de48a253.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-jump-forward-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}.mejs-controls .mejs-button.mejs-skip-back-button{background:transparent url(https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/cd6dc830eb45b3a5a96bbc936ff54846.png) no-repeat 3px 3px}.mejs-controls .mejs-button.mejs-skip-back-button button{background:transparent;font-size:9px;line-height:normal;color:#fff}</style><style type="text/css">/*
 * Copyright (C) 2014 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* customizations to mediaelementplayer css */

/*
  Because this file is not proccessed by our brandable_css sass pipeline,
  it cannot use our sass-direction helpers. So we have to handle RTL manually
  by putting direction-specific styles in [dir="ltr"] or [dir="rtl"] blocks.
*/
/* stylelint-disable property-disallowed-list, declaration-property-value-disallowed-list */

/* good menu widths */
.mejs-sourcechooser-selector {
  width: 160px;
}
.mejs-sourcechooser-selector label {
  width: 160px !important;
}

.mejs-captions-selector {
  width: 105px;
}
[dir="ltr"]  .mejs-captions-selector { text-align: left }
[dir="rtl"]  .mejs-captions-selector { text-align: right }

.mejs-captions-selector label {
  width: 70px !important;
}

/* Subtitile upload link */
.mejs-captions-selector .upload-track {
  color: white;
  margin-top: 3px;
  margin-bottom: 5px;
}
[dir="ltr"] .mejs-captions-selector .upload-track {
  margin-right: 0px;
  margin-left: 5px;
  float: left;
}
[dir="rtl"] .mejs-captions-selector .upload-track {
  margin-left: 0px;
  margin-right: 5px;
  float: right;
}

/* inherited caption "?" icon for tooltip */
.mejs-captions-selector .track-tip-container {
  position: absolute;
  top: 5px;
}

/* "x" button to remove a subtitle */
.mejs-captions-selector a[data-remove] {
  position: absolute;
  top: 5px;
  color: white;
}
[dir="ltr"] .mejs-captions-selector a[data-remove] { right: 5px }
[dir="rtl"] .mejs-captions-selector a[data-remove] { left: 5px }

[dir="ltr"] .mejs-captions-selector .track-tip-container { right: 6px }
[dir="rtl"] .mejs-captions-selector .track-tip-container { left: 6px }


/* style menu items without a radio button */
.mejs-button [role="menu"] {
  padding: 0 !important;
}
 /* compensate for above 0 padding */
 .mejs-button [role="menu"] ul li {
  position: relative;
  padding: 0 10px !important;
}
/* add a hover effect */
.mejs-button [role="menu"] ul li:hover {
  background-color: #c8c8c8 !important;
  background-color: rgba(255, 255, 255, 0.4) !important;
}
.mejs-button [role="menu"] ul li input {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
}

.mejs-button [role="menu"] ul li input[type="radio"]:not(:checked)+span {
  display: none;
}

.mejs-button [role="menu"] ul li input[type="radio"]:checked+span {
  display: inline;
  position: absolute;
  top: 5px;
  left: 2px;
}

.mejs-button [role="menu"] ul li label {
  cursor: pointer;
}
[dir="ltr"] .mejs-button [role="menu"] ul li label { margin-left: 5px }
[dir="rtl"] .mejs-button [role="menu"] ul li label { margin-right: 5px }


.mejs-button [role="menu"] label.mejs-selected {
  color: #21f8f8 !important;
}

/* stylelint-enable property-disallowed-list, declaration-property-value-disallowed-list */
</style><style data-emotion="css" data-s=""></style></head>

<body class="with-left-side course-menu-expanded padless-content pages primary-nav-expanded context-course_1688237 responsive_student_grades_page show ally-tooltips-enabled webkit chrome no-touch">

<noscript aria-hidden="true">
  <div role="alert" class="ic-flash-static ic-flash-error">
    <div class="ic-flash__icon" aria-hidden="true">
      <i class="icon-warning"></i>
    </div>
    <h1>You need to have JavaScript enabled in order to access this site.</h1>
  </div>
</noscript>




<div id="flash_message_holder" aria-hidden="true"></div>
<div id="flash_screenreader_holder" role="alert" aria-live="assertive" aria-relevant="additions" class="screenreader-only" aria-atomic="true"></div>

<div id="application" class="ic-app" aria-hidden="true">
  



<header id="mobile-header" class="no-print">
  <button type="button" class="Button Button--icon-action-rev Button--large mobile-header-hamburger">
    <i class="icon-solid icon-hamburger"></i>
    <span id="mobileHeaderInboxUnreadBadge" class="menu-item__badge" style="min-width: 0; top: 12px; height: 12px; right: 6px; display:none;"></span>
    <span class="screenreader-only">Dashboard</span>
  </button>
  <div class="mobile-header-space"></div>
    <a class="mobile-header-title expandable" href="https://canvas.uw.edu/courses/1688237" role="button" aria-controls="mobileContextNavContainer">
      <div>PYTHON 330 B</div>
        <div>Lesson 07 Content</div>
    </a>
    <div class="mobile-header-space"></div>
    <button type="button" class="Button Button--icon-action-rev Button--large mobile-header-arrow" aria-label="Navigation Menu">
      <i class="icon-arrow-open-down" id="mobileHeaderArrowIcon"></i>
    </button>
</header>
<nav id="mobileContextNavContainer"></nav>

<header id="header" class="ic-app-header no-print ">
  <a href="https://canvas.uw.edu/courses/1688237/pages/lesson-07-content?module_item_id=18564781#content" id="skip_navigation_link">Skip To Content</a>
  <div role="region" class="ic-app-header__main-navigation" aria-label="Global Navigation">
      <div class="ic-app-header__logomark-container">
        <a href="https://canvas.uw.edu/" class="ic-app-header__logomark">
          <span class="screenreader-only">Dashboard</span>
        </a>
      </div>
    <ul id="menu" class="ic-app-header__menu-list">
        <li class="menu-item ic-app-header__menu-list-item ">
          <a id="global_nav_profile_link" role="button" href="https://canvas.uw.edu/profile/settings" class="ic-app-header__menu-list-link">
            <div class="menu-item-icon-container">
              <div aria-hidden="true" class="fs-exclude ic-avatar ">
                <img src="./django_blog_files/avatar-50.png" alt="Bita Massoudi">
              </div>
              <span class="menu-item__badge"></span>
            </div>
            <div class="menu-item__text">
              Account
            </div>
          </a>
        </li>
      <li class="ic-app-header__menu-list-item ">
        <a id="global_nav_dashboard_link" href="https://canvas.uw.edu/" class="ic-app-header__menu-list-link">
          <div class="menu-item-icon-container" aria-hidden="true">
            <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--dashboard" version="1.1" x="0" y="0" viewBox="0 0 280 200" enable-background="new 0 0 280 200" xml:space="preserve"><path d="M273.09,180.75H197.47V164.47h62.62A122.16,122.16,0,1,0,17.85,142a124,124,0,0,0,2,22.51H90.18v16.29H6.89l-1.5-6.22A138.51,138.51,0,0,1,1.57,142C1.57,65.64,63.67,3.53,140,3.53S278.43,65.64,278.43,142a137.67,137.67,0,0,1-3.84,32.57ZM66.49,87.63,50.24,71.38,61.75,59.86,78,76.12Zm147,0L202,76.12l16.25-16.25,11.51,11.51ZM131.85,53.82v-23h16.29v23Zm15.63,142.3a31.71,31.71,0,0,1-28-16.81c-6.4-12.08-15.73-72.29-17.54-84.25a8.15,8.15,0,0,1,13.58-7.2c8.88,8.21,53.48,49.72,59.88,61.81a31.61,31.61,0,0,1-27.9,46.45ZM121.81,116.2c4.17,24.56,9.23,50.21,12,55.49A15.35,15.35,0,1,0,161,157.3C158.18,152,139.79,133.44,121.81,116.2Z"></path></svg>

          </div>
          <div class="menu-item__text">
            Dashboard
          </div>
        </a>
      </li>
        <li class="menu-item ic-app-header__menu-list-item ic-app-header__menu-list-item--active">
          <a id="global_nav_courses_link" role="button" href="https://canvas.uw.edu/courses" class="ic-app-header__menu-list-link">
            <div class="menu-item-icon-container" aria-hidden="true">
              <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--courses" version="1.1" x="0" y="0" viewBox="0 0 280 259" enable-background="new 0 0 280 259" xml:space="preserve"><path d="M73.31,198c-11.93,0-22.22,8-24,18.73a26.67,26.67,0,0,0-.3,3.63v.3a22,22,0,0,0,5.44,14.65,22.47,22.47,0,0,0,17.22,8H200V228.19h-134V213.08H200V198Zm21-105.74h90.64V62H94.3ZM79.19,107.34V46.92H200v60.42Zm7.55,30.21V122.45H192.49v15.11ZM71.65,16.71A22.72,22.72,0,0,0,49,39.36V190.88a41.12,41.12,0,0,1,24.32-8h157V16.71ZM33.88,39.36A37.78,37.78,0,0,1,71.65,1.6H245.36V198H215.15v45.32h22.66V258.4H71.65a37.85,37.85,0,0,1-37.76-37.76Z"></path></svg>

            </div>
            <div class="menu-item__text">
              Courses
            </div>
          </a>
        </li>
      <li class="menu-item ic-app-header__menu-list-item ">
        <a id="global_nav_calendar_link" href="https://canvas.uw.edu/calendar" class="ic-app-header__menu-list-link">
          <div class="menu-item-icon-container" aria-hidden="true">
            <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--calendar" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M197.07,213.38h16.31V197.07H197.07Zm-16.31,16.31V180.76h48.92v48.92Zm-48.92-16.31h16.31V197.07H131.85Zm-16.31,16.31V180.76h48.92v48.92ZM66.62,213.38H82.93V197.07H66.62ZM50.32,229.68V180.76H99.24v48.92Zm146.75-81.53h16.31V131.85H197.07Zm-16.31,16.31V115.54h48.92v48.92Zm-48.92-16.31h16.31V131.85H131.85Zm-16.31,16.31V115.54h48.92v48.92ZM66.62,148.15H82.93V131.85H66.62ZM50.32,164.46V115.54H99.24v48.92ZM34,262.29H246V82.93H34ZM246,66.62V42.16A8.17,8.17,0,0,0,237.84,34H213.38v8.15a8.15,8.15,0,1,1-16.31,0V34H82.93v8.15a8.15,8.15,0,0,1-16.31,0V34H42.16A8.17,8.17,0,0,0,34,42.16V66.62Zm-8.15-48.92a24.49,24.49,0,0,1,24.46,24.46V278.6H17.71V42.16A24.49,24.49,0,0,1,42.16,17.71H66.62V9.55a8.15,8.15,0,0,1,16.31,0v8.15H197.07V9.55a8.15,8.15,0,1,1,16.31,0v8.15Z"></path></svg>

          </div>
          <div class="menu-item__text">
            Calendar
          </div>
        </a>
      </li>
      <li class="menu-item ic-app-header__menu-list-item ">
        <a id="global_nav_conversations_link" href="https://canvas.uw.edu/conversations" class="ic-app-header__menu-list-link">
          <div class="menu-item-icon-container">
            <span aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--inbox" version="1.1" x="0" y="0" viewBox="0 0 280 280" enable-background="new 0 0 280 280" xml:space="preserve"><path d="M91.72,120.75h96.56V104.65H91.72Zm0,48.28h80.47V152.94H91.72Zm0-96.56h80.47V56.37H91.72Zm160.94,34.88H228.52V10.78h-177v96.56H27.34A24.17,24.17,0,0,0,3.2,131.48V244.14a24.17,24.17,0,0,0,24.14,24.14H252.66a24.17,24.17,0,0,0,24.14-24.14V131.48A24.17,24.17,0,0,0,252.66,107.34Zm0,16.09a8.06,8.06,0,0,1,8,8v51.77l-32.19,19.31V123.44ZM67.58,203.91v-177H212.42v177ZM27.34,123.44H51.48v79.13L19.29,183.26V131.48A8.06,8.06,0,0,1,27.34,123.44ZM252.66,252.19H27.34a8.06,8.06,0,0,1-8-8V202l30,18H230.75l30-18v42.12A8.06,8.06,0,0,1,252.66,252.19Z"></path></svg>
</span>
            <span class="menu-item__badge"></span>
          </div>
          <div class="menu-item__text">
            Inbox
          </div>
        </a>
      </li>
        <li class="menu-item ic-app-header__menu-list-item">
          <a id="global_nav_history_link" role="button" href="https://canvas.uw.edu/courses/1688237/pages/lesson-07-content?module_item_id=18564781#" class="ic-app-header__menu-list-link">
            <div class="menu-item-icon-container" aria-hidden="true">
              <svg viewBox="0 0 1920 1920" class="ic-icon-svg menu-item__icon svg-icon-history" version="1.1" xmlns="http://www.w3.org/2000/svg">
    <path d="M960 112.941c-467.125 0-847.059 379.934-847.059 847.059 0 467.125 379.934 847.059 847.059 847.059 467.125 0 847.059-379.934 847.059-847.059 0-467.125-379.934-847.059-847.059-847.059M960 1920C430.645 1920 0 1489.355 0 960S430.645 0 960 0s960 430.645 960 960-430.645 960-960 960m417.905-575.955L903.552 988.28V395.34h112.941v536.47l429.177 321.77-67.765 90.465z" stroke="none" stroke-width="1" fill-rule="evenodd"></path>
</svg>
            </div>
            <div class="menu-item__text">
              History
            </div>
          </a>
        </li>
        

      <li class="ic-app-header__menu-list-item">
        <a id="global_nav_help_link" role="button" class="ic-app-header__menu-list-link" data-track-category="help system" data-track-label="help button" href="http://help.instructure.com/">
          <div class="menu-item-icon-container" role="presentation">
              <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg menu-item__icon svg-icon-help" version="1.1" x="0" y="0" viewBox="0 0 200 200" enable-background="new 0 0 200 200" xml:space="preserve" fill="currentColor"><path d="M100,127.88A11.15,11.15,0,1,0,111.16,139,11.16,11.16,0,0,0,100,127.88Zm8.82-88.08a33.19,33.19,0,0,1,23.5,23.5,33.54,33.54,0,0,1-24,41.23,3.4,3.4,0,0,0-2.74,3.15v9.06H94.42v-9.06a14.57,14.57,0,0,1,11.13-14,22.43,22.43,0,0,0,13.66-10.27,22.73,22.73,0,0,0,2.31-17.37A21.92,21.92,0,0,0,106,50.59a22.67,22.67,0,0,0-19.68,3.88,22.18,22.18,0,0,0-8.65,17.64H66.54a33.25,33.25,0,0,1,13-26.47A33.72,33.72,0,0,1,108.82,39.8ZM100,5.2A94.8,94.8,0,1,0,194.8,100,94.91,94.91,0,0,0,100,5.2m0,178.45A83.65,83.65,0,1,1,183.65,100,83.73,83.73,0,0,1,100,183.65" transform="translate(-5.2 -5.2)"></path></svg>

            <span class="menu-item__badge"></span>
          </div>
          <div class="menu-item__text">
            Help
          </div>
</a>      </li>
    </ul>
  </div>
  <div class="ic-app-header__secondary-navigation">
    <ul class="ic-app-header__menu-list">
      <li class="menu-item ic-app-header__menu-list-item">
        <a id="primaryNavToggle" role="button" href="https://canvas.uw.edu/courses/1688237/pages/lesson-07-content?module_item_id=18564781#" class="ic-app-header__menu-list-link ic-app-header__menu-list-link--nav-toggle" aria-label="Minimize global navigation" title="Minimize global navigation">
          <div class="menu-item-icon-container" aria-hidden="true">
            <svg xmlns="http://www.w3.org/2000/svg" class="ic-icon-svg ic-icon-svg--navtoggle" version="1.1" x="0" y="0" width="40" height="32" viewBox="0 0 40 32" xml:space="preserve">
  <path d="M39.5,30.28V2.48H37.18v27.8Zm-4.93-13.9L22.17,4,20.53,5.61l9.61,9.61H.5v2.31H30.14l-9.61,9.61,1.64,1.64Z"></path>
</svg>

          </div>
        </a>
      </li>
    </ul>
  </div>
  <div id="global_nav_tray_container"></div>
  <div id="global_nav_tour"></div>
</header>


  <div id="instructure_ajax_error_box">
    <div style="text-align: right; background-color: #fff;"><a href="https://canvas.uw.edu/courses/1688237/pages/lesson-07-content?module_item_id=18564781#" class="close_instructure_ajax_error_box_link">Close</a></div>
    <iframe id="instructure_ajax_error_result" src="./django_blog_files/saved_resource(4).html" style="border: 0;" title="Error"></iframe>
  </div>

  <div id="wrapper" class="ic-Layout-wrapper">
      <div class="ic-app-nav-toggle-and-crumbs no-print">
          <button type="button" id="courseMenuToggle" class="Button Button--link ic-app-course-nav-toggle" aria-live="polite" aria-label="Hide Courses Navigation Menu">
            <i class="icon-hamburger" aria-hidden="true"></i>
          </button>

        <div class="ic-app-crumbs">
            <nav id="breadcrumbs" role="navigation" aria-label="breadcrumbs"><ul><li class="home"><a href="https://canvas.uw.edu/"><span class="ellipsible"><i class="icon-home" title="My Dashboard">
  <span class="screenreader-only">My Dashboard</span>
</i>
</span></a></li><li><a href="https://canvas.uw.edu/courses/1688237"><span class="ellipsible">PYTHON 330 B</span></a></li><li><a href="https://canvas.uw.edu/courses/1688237/pages"><span class="ellipsible">Pages</span></a></li><li><span class="ellipsible">Lesson 07 Content</span></li></ul></nav>
        </div>


        <div class="right-of-crumbs">
        </div>

      </div>
    <div id="main" class="ic-Layout-columns">
        <div class="ic-Layout-watermark"></div>
        <div id="left-side" class="ic-app-course-menu ic-sticky-on list-view" style="display: block">
          <div id="sticky-container" class="ic-sticky-frame">
              <span id="section-tabs-header-subtitle" class="ellipsis">Autumn 2023</span>
            <nav role="navigation" aria-label="Courses Navigation Menu"><ul id="section-tabs"><li class="section"><a href="https://canvas.uw.edu/courses/1688237" class="home" tabindex="0">Home</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/announcements" class="announcements" tabindex="0">Announcements</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/modules" class="modules" tabindex="0">Modules</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/discussion_topics" class="discussions" tabindex="0">Discussions</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/grades" class="grades" tabindex="0">Grades<b class="nav-badge">11</b></a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/users" class="people" tabindex="0">People</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/external_tools/95443" class="context_external_tool_95443" tabindex="0">Zoom</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/external_tools/105597" class="context_external_tool_105597" tabindex="0">UW Resources</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/external_tools/167364" class="context_external_tool_167364" tabindex="0">Info &amp; Help</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/external_tools/173244" class="context_external_tool_173244" tabindex="0">Poll Everywhere</a></li><li class="section"><a href="https://canvas.uw.edu/courses/1688237/external_tools/21130" class="context_external_tool_21130" tabindex="0">Panopto Recordings</a></li></ul></nav>
          </div>
        </div>
      <div id="not_right_side" class="ic-app-main-content">
        <div id="content-wrapper" class="ic-Layout-contentWrapper">
          
          <div id="content" class="ic-Layout-contentMain" role="main">
            

  

<div id="wiki_page_show">

<div class="show-content user_content clearfix enhanced">
  
    <h1 class="page-title">Lesson 07 Content<button aria-haspopup="dialog" class="ally-accessible-versions ally-add-tooltip" data-id="page:6704024" data-ally-content-id="page:6704024" data-ally-richcontent-eid="page:6704024" aria-label="Alternative formats" title="Alternative formats">
    <span class="ally-prominent-af-download-button"></span>
</button></h1>
  
  
  
    <div id="menuheading">
<h2 class="caH2">Django... continued</h2>
<div id="navbar" class="caNav grid-row around-md clearunderlinestyle" role="navigation"><a class="icon-info" title="Lesson 07 Introduction" href="https://canvas.uw.edu/courses/1688237/pages/lesson-07-introduction" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1688237/pages/lesson-07-introduction" data-api-returntype="Page">Introduction</a> | <a class="icon-integrations" title="Lesson 07 Content" href="https://canvas.uw.edu/courses/1688237/pages/lesson-07-content" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1688237/pages/lesson-07-content" data-api-returntype="Page">Content</a> | <a class="icon-quiz" title="Lesson 07 Quiz" href="https://canvas.uw.edu/courses/1688237/assignments/8426908" data-api-returntype="Assignment" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1688237/assignments/8426908">Quiz</a>&nbsp;| <a class="icon-educators" title="Lesson 07 Activity" href="https://canvas.uw.edu/courses/1688237/assignments/8426929" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1688237/assignments/8426929" data-api-returntype="Assignment">Activity</a> | <a class="icon-assignment" title="Lesson 07 Assignment" href="https://canvas.uw.edu/courses/1688237/assignments/8426930" data-api-returntype="Assignment" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1688237/assignments/8426930">Assignment</a> | <a class="icon-settings" title="Lesson 07 Code Talk" href="https://canvas.uw.edu/courses/1688237/discussion_topics/8197159" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1688237/discussion_topics/8197159" data-api-returntype="Discussion">Code Talk</a></div>
</div>
<h3><span>Model View Template (MVT) Applications</span></h3>
<p><span>We have already started our Django blogging app, but before we continue working on it, let's examine the Model View Template (MVT) pattern that Django uses to help us organize our code.</span></p>
<p><iframe style="width: 700px; height: 405px;" title="Internet Programming in Python: 06.05 Model View Controller" src="./django_blog_files/retrieve.html" width="700px" height="405px" allowfullscreen="allowfullscreen" webkitallowfullscreen="webkitallowfullscreen" mozallowfullscreen="mozallowfullscreen" allow="geolocation *; midi *; encrypted-media *; autoplay *"></iframe></p>
<h3><span>Categorizing Posts</span></h3>
<p><span>Okay, we are ready to continue working on our Django blog!&nbsp;</span></p>
<p>One of the most common features in a blog is the ability to categorize posts.&nbsp;Let’s add this feature to our blog.&nbsp;To do so, we’ll be adding a new model, and making some changes to existing code.&nbsp;This means that we’ll need to<span>&nbsp;</span><em>change our database schema</em>.</p>
<p>You’ve seen how to add new tables to a database using the<span>&nbsp;</span><code class="docutils literal"><span class="pre">migrate</span></code><span>&nbsp;</span>command.&nbsp;And you’ve created your first migration in setting up the<span>&nbsp;</span><code class="docutils literal"><span class="pre">Post</span></code><span>&nbsp;</span>model.&nbsp;This is an example of altering the<span>&nbsp;</span><em>database schema</em><span>&nbsp;</span>using Python code.</p>
<p>We want to add a new model to represent the categories our blog posts might fall into. The following video describes the requirements for this model.</p>
<p><iframe style="width: 700px; height: 405px;" title="Internet Programming in Python: 07.01 The Category Model" src="./django_blog_files/retrieve(1).html" width="700px" height="405px" allowfullscreen="allowfullscreen" webkitallowfullscreen="webkitallowfullscreen" mozallowfullscreen="mozallowfullscreen" allow="geolocation *; midi *; encrypted-media *; autoplay *"></iframe></p>
<p>When you're ready to see my solution, it is below:</p>
<p><iframe style="width: 700px; height: 405px;" title="Internet Programming in Python: 07.02 Category Model Solution" src="./django_blog_files/retrieve(2).html" width="700px" height="405px" allowfullscreen="allowfullscreen" webkitallowfullscreen="webkitallowfullscreen" mozallowfullscreen="mozallowfullscreen" allow="geolocation *; midi *; encrypted-media *; autoplay *"></iframe></p>
<p>And here is the content I added to my blogging/models.py.</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">class</span> <span style="color: #bb0066;">Category</span>(models<span style="color: #333333;">.</span>Model):
    name <span style="color: #333333;">=</span> models<span style="color: #333333;">.</span>CharField(max_length<span style="color: #333333;">=</span><span style="color: #0000dd;">128</span>)
    description <span style="color: #333333;">=</span> models<span style="color: #333333;">.</span>TextField(blank<span style="color: #333333;">=</span><span style="color: #008800;">True</span>)
    posts <span style="color: #333333;">=</span> models<span style="color: #333333;">.</span>ManyToManyField(Post, blank<span style="color: #333333;">=</span><span style="color: #008800;">True</span>, related_name<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">'categories'</span>)
</pre>
</div>
<p>In our<span>&nbsp;</span><code class="docutils literal"><span class="pre">Post</span></code><span>&nbsp;</span>model, we used a<span>&nbsp;</span><code class="docutils literal"><span class="pre">ForeignKeyField</span></code><span>&nbsp;</span>field to match an author to her posts. This models the situation in which a single author can have many posts, while each post has only one author.&nbsp;We call this a<span>&nbsp;</span><em>Many to One</em><span>&nbsp;</span>relationship.&nbsp;But any given<span>&nbsp;</span><code class="docutils literal"><span class="pre">Post</span></code><span>&nbsp;</span>might belong in more than one<span>&nbsp;</span><code class="docutils literal"><span class="pre">Category</span></code>.&nbsp;And it would be a waste to allow only one<span>&nbsp;</span><code class="docutils literal"><span class="pre">Post</span></code><span>&nbsp;</span>for each<span>&nbsp;</span><code class="docutils literal"><span class="pre">Category</span></code>. This is why we used the<span>&nbsp;</span><code class="docutils literal"><span class="pre">ManyToManyField</span></code></p>
<p>After making our model changes, we migrated our changes into our database:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #c65d09;">(djangoenv)$</span> python manage.py makemigrations
<span style="color: #888888;">Migrations for 'blogging':</span>
<span style="color: #888888;">  0002_category.py:</span>
<span style="color: #888888;">    - Create model Category</span>
</pre>
</div>
<p>Once the migration has been created, we can apply it with the<span>&nbsp;</span><code class="docutils literal"><span class="pre">migrate</span></code><span>&nbsp;</span>management command.</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #c65d09;">(djangoenv)$</span> python manage.py migrate
<span style="color: #888888;">Operations to perform:</span>
<span style="color: #888888;">  Apply all migrations: sessions, contenttypes, admin, blogging, auth</span>
<span style="color: #888888;">Running migrations:</span>
<span style="color: #888888;">  Rendering model states... DONE</span>
<span style="color: #888888;">  Applying blogging.0002_category... OK</span>
</pre>
</div>
<p>Finally, we registered the `Category` model with the Django admin, started up our server, and added some categories in the admin. Here is the `blogging/models.py` that we used to register our model:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #888888;"># blogging/admin.py</span>

<span style="color: #008800;">from</span> <span style="color: #0e84b5;">django.contrib</span> <span style="color: #008800;">import</span> admin
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">blogging.models</span> <span style="color: #008800;">import</span> Post, Category  <span style="color: #888888;"># &lt;-- import Category</span>


admin<span style="color: #333333;">.</span>site<span style="color: #333333;">.</span>register(Post)
admin<span style="color: #333333;">.</span>site<span style="color: #333333;">.</span>register(Category)               <span style="color: #888888;"># &lt;-- Register Category</span>
</pre>
</div>
<h4>Improving the Category Model</h4>
<p>In the admin, we saw the the list of categories had category names along the lines of "Category Object 1", "Category Object 2", etc. Just like with posts, Django doesn't know what to call each of these categories. We have to tell Django that the `name` field is what it should use to name a Category!</p>
<p>So let’s make<span>&nbsp;</span><code class="docutils literal"><span class="pre">Category</span></code><span>&nbsp;</span>object look nice the same way we did with<span>&nbsp;</span><code class="docutils literal"><span class="pre">Post</span></code>. We'll begin with a test. Add&nbsp;this to<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging/tests.py</span></code>:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #888888;"># another import</span>
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">blogging.models</span> <span style="color: #008800;">import</span> Category

<span style="color: #888888;"># and the test case and test</span>
<span style="color: #008800;">class</span> <span style="color: #bb0066;">CategoryTestCase</span>(TestCase):

    <span style="color: #008800;">def</span> <span style="color: #0066bb;">test_string_representation</span>(<span style="color: #007020;">self</span>):
        expected <span style="color: #333333;">=</span> <span style="background-color: #fff0f0;">"A Category"</span>
        c1 <span style="color: #333333;">=</span> Category(name<span style="color: #333333;">=</span>expected)
        actual <span style="color: #333333;">=</span> <span style="color: #007020;">str</span>(c1)
        <span style="color: #007020;">self</span><span style="color: #333333;">.</span>assertEqual(expected, actual)
</pre>
</div>
<p>When you run your tests, you now have two, and one is failing because the<span>&nbsp;</span><code class="docutils literal"><span class="pre">Category</span></code><span>&nbsp;</span>object doesn’t look right.</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #c65d09;">(djangoenv)$</span> python manage.py <span style="color: #007020;">test </span>blogging
<span style="color: #888888;">Creating test database for alias 'default'...</span>
<span style="color: #888888;">...</span>

<span style="color: #888888;">Ran 2 tests in 0.011s</span>

<span style="color: #888888;">FAILED (failures=1)</span>
</pre>
</div>
<p>Do you remember how you made that change for a<span>&nbsp;</span><code class="docutils literal"><span class="pre">Post</span></code>?</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">class</span> <span style="color: #bb0066;">Category</span>(models<span style="color: #333333;">.</span>Model):
    <span style="color: #888888;">#...</span>

    <span style="color: #008800;">def</span> <span style="color: #0066bb;">__str__</span>(<span style="color: #007020;">self</span>):
        <span style="color: #008800;">return</span> <span style="color: #007020;">self</span><span style="color: #333333;">.</span>name
</pre>
</div>
<p>This change should resolve our tests. Try running the blogging app tests again. Do they pass?</p>
<p>And you can also start your Django development server and see if posts are correctly listed in <a href="http://localhost:8000/admin/" class="external" target="_blank" rel="noreferrer noopener"><span>the admin.</span><span class="external_link_icon" style="margin-inline-start: 5px; display: inline-block; text-indent: initial; " role="presentation"><svg viewBox="0 0 1920 1920" xmlns="http://www.w3.org/2000/svg" style="width:1em; height:1em; vertical-align:middle; fill:currentColor">
    <path d="M1226.667 267c88.213 0 160 71.787 160 160v426.667H1280v-160H106.667v800C106.667 1523 130.56 1547 160 1547h1066.667c29.44 0 53.333-24 53.333-53.333v-213.334h106.667v213.334c0 88.213-71.787 160-160 160H160c-88.213 0-160-71.787-160-160V427c0-88.213 71.787-160 160-160Zm357.706 442.293 320 320c20.8 20.8 20.8 54.614 0 75.414l-320 320-75.413-75.414 228.907-228.906H906.613V1013.72h831.254L1508.96 784.707l75.413-75.414Zm-357.706-335.626H160c-29.44 0-53.333 24-53.333 53.333v160H1280V427c0-29.333-23.893-53.333-53.333-53.333Z" fill-rule="evenodd"></path>
</svg>
<span class="screenreader-only">Links to an external site.</span></span></a></p>
<p>You may also have noticed that the admin links to the list of categories with the word "Categorys". Categorys? That looks funny. In <code class="docutils literal"><span class="pre">blogging/models.py</span></code>, add the following method to the Category class:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">class</span> <span style="color: #bb0066;">Category</span>(models<span style="color: #333333;">.</span>Model):<br><span style="color: #888888;">    #...</span> <br><br>    <span style="color: #008800;">class</span> <span style="color: #bb0066;">Meta</span>:
        verbose_name_plural <span style="color: #333333;">=</span> <span style="background-color: #fff0f0;">'Categories'</span>&nbsp;
</pre>
</div>
<p>Save that file and reload <code class="docutils literal"><span class="pre">http://localhost:8000/admin/.&nbsp;</span></code>Much bettter. Go ahead and add a few categories and put some posts in them. Visit your posts, add new ones and then categorize them.</p>
<p>We have now completed a data model for our application.&nbsp;And thanks to Django’s easy-to-use admin, we have a reasonable CRUD application where we can manage blog posts and the categories we put them in.</p>
<div id="break-time" class="section">
<p>Once you have this working, commit your changes. Next we will&nbsp;put a public face on our new creation.</p>
</div>
<div id="a-public-face" class="section">
<h3><span>A Public Face</span></h3>
<p class="left">Point your browser at<span>&nbsp;</span><a class="reference external" href="http://localhost:8000/">http://localhost:8000/</a>.&nbsp;What do you see?&nbsp;Why?</p>
<p>We need to add some public pages for our blog.&nbsp;In Django, the code that builds a page that you can see is called a<span>&nbsp;</span><em>view</em>.</p>
<div id="django-views" class="section">
<h3>Django Views</h3>
<p>A<span>&nbsp;</span><em>view</em><span>&nbsp;</span>can be defined as a<span>&nbsp;</span><em>callable</em><span>&nbsp;</span>that takes a request and returns a response.&nbsp;Classically, Django views were functions, but starting in version 1.3 there is added support for Class-based Views (a class with a<span>&nbsp;</span><code class="docutils literal"><span class="pre">__call__</span></code><span>&nbsp;</span>method is a callable).&nbsp;Let’s add a really simple view to our app.&nbsp;It will be a stub for our public UI.</p>
<p>Add this to<span>&nbsp;</span><code class="docutils literal"><span class="pre">views.py</span></code><span>&nbsp;</span>in<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging</span></code></p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">from</span> <span style="color: #0e84b5;">django.http</span> <span style="color: #008800;">import</span> HttpResponse, HttpResponseRedirect, Http404

<span style="color: #008800;">def</span> <span style="color: #0066bb;">stub_view</span>(request, <span style="color: #333333;">*</span>args, <span style="color: #333333;">**</span>kwargs):
    body <span style="color: #333333;">=</span> <span style="background-color: #fff0f0;">"Stub View</span><span style="color: #666666; background-color: #fff0f0;">\n\n</span><span style="background-color: #fff0f0;">"</span>
    <span style="color: #008800;">if</span> args:
        body <span style="color: #333333;">+=</span> <span style="background-color: #fff0f0;">"Args:</span><span style="color: #666666; background-color: #fff0f0;">\n</span><span style="background-color: #fff0f0;">"</span>
        body <span style="color: #333333;">+=</span> <span style="background-color: #fff0f0;">"</span><span style="color: #666666; background-color: #fff0f0;">\n</span><span style="background-color: #fff0f0;">"</span><span style="color: #333333;">.</span>join([<span style="background-color: #fff0f0;">"</span><span style="color: #666666; background-color: #fff0f0;">\t</span><span style="background-color: #fff0f0;">%s"</span> <span style="color: #333333;">%</span> a <span style="color: #008800;">for</span> a <span style="color: #000000;">in</span> args])
    <span style="color: #008800;">if</span> kwargs:
        body <span style="color: #333333;">+=</span> <span style="background-color: #fff0f0;">"Kwargs:</span><span style="color: #666666; background-color: #fff0f0;">\n</span><span style="background-color: #fff0f0;">"</span>
        body <span style="color: #333333;">+=</span> <span style="background-color: #fff0f0;">"</span><span style="color: #666666; background-color: #fff0f0;">\n</span><span style="background-color: #fff0f0;">"</span><span style="color: #333333;">.</span>join([<span style="background-color: #fff0f0;">"</span><span style="color: #666666; background-color: #fff0f0;">\t</span><span style="background-color: #fff0f0;">%s: %s"</span> <span style="color: #333333;">%</span> i <span style="color: #008800;">for</span> i <span style="color: #000000;">in</span> kwargs<span style="color: #333333;">.</span>items()])
    <span style="color: #008800;">return</span> HttpResponse(body, content_type<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"text/plain"</span>)
</pre>
</div>
<p>In the Starting Django tutorial, you learned about Django<span>&nbsp;</span><strong>urlconfs.&nbsp;</strong>We used our project urlconf to hook the Django admin into our project and we want to do the same thing for our new app.&nbsp;In general, an<span>&nbsp;</span><em>app</em><span>&nbsp;</span>that serves any sort of views should contain its own urlconf.&nbsp;The project urlconf should mainly<span>&nbsp;</span><em>include</em><span>&nbsp;</span>these where possible.</p>
<p>Create a new file<span>&nbsp;</span><code class="docutils literal"><span class="pre">urls.py</span></code><span>&nbsp;</span>inside the<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging</span></code><span>&nbsp;</span>app package.&nbsp;Open it in your editor and add the following code:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">from</span> <span style="color: #0e84b5;">django.urls</span> <span style="color: #008800;">import</span> path
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">blogging.views</span> <span style="color: #008800;">import</span> stub_view

urlpatterns <span style="color: #333333;">=</span> [
    path(<span style="background-color: #fff0f0;">''</span>, stub_view, name<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"blog_index"</span>),
]
</pre>
</div>
<p>In order for our new urls to load, we’ll need to include them in our project urlconf.&nbsp;Open<span>&nbsp;</span><code class="docutils literal"><span class="pre">urls.py</span></code><span>&nbsp;</span>from the<span>&nbsp;</span><code class="docutils literal"><span class="pre">mysite</span></code><span>&nbsp;</span>project package and add this:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #888888;"># add this new import</span>
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">django.urls</span> <span style="color: #008800;">import</span> path, include    <span style="color: #888888;"># &lt;-- make sure that you have both of these imports</span>

<span style="color: #888888;"># then modify urlpatterns as follows:</span>
urlpatterns <span style="color: #333333;">=</span> [
    path(<span style="background-color: #fff0f0;">''</span>, include(<span style="background-color: #fff0f0;">'blogging.urls'</span>)),  <span style="color: #888888;"># &lt;-- add this</span>
    <span style="color: #888888;">#... other included urls</span>
]
</pre>
</div>
<p>Try reloading<span>&nbsp;</span><a class="reference external" href="http://localhost:8000/">http://localhost:8000/</a>.&nbsp;You should see some output now!</p>
<p><span>Once you have this working, commit your changes.</span></p>
</div>
<div id="project-url-space" class="section">
<h3>Project URL Space</h3>
<p>A project is defined by the urls a user can visit.&nbsp;What should our users be able to see when they visit our blog?</p>
<ul class="build simple">
<li>A list view that shows blog posts, most recent first.</li>
<li>An individual post view, showing a single post (a permalink).</li>
</ul>
<p>Let’s add urls for each of these.&nbsp;For now, we’ll use the stub view we’ve created so we can concentrate on the url routing.&nbsp;We’ve already got a good url for the list page:<span>&nbsp;</span><code class="docutils literal"><span class="pre">blog_index</span></code><span>&nbsp;</span>at ‘/’.&nbsp;For the view of a single post, we’ll need to capture the id of the post.</p>
<p>Add this to<span>&nbsp;</span><code class="docutils literal"><span class="pre">urlpatterns</span></code><span>&nbsp;</span>in<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging/urls.py</span></code>:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;">    path(<span style="background-color: #fff0f0;">'posts/&lt;int:post_id&gt;/'</span>, stub_view, name<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"blog_detail"</span>),
</pre>
</div>
<p><span><em>&lt;int:post_id&gt;</em>&nbsp;</span>captures one or more digits as the post_id. And the <code>stub_view</code> has shown us that we can capture this number provided in the path and use it in our view.</p>
<p>Your <code>blogging/urls.py</code> should now look like:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">from</span> <span style="color: #0e84b5;">django.urls</span> <span style="color: #008800;">import</span> path

<span style="color: #008800;">from</span> <span style="color: #0e84b5;">blogging.views</span> <span style="color: #008800;">import</span> stub_view

urlpatterns <span style="color: #333333;">=</span> [
    path(<span style="background-color: #fff0f0;">''</span>, stub_view, name<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"blog_index"</span>),
    path(<span style="background-color: #fff0f0;">'posts/&lt;int:post_id&gt;/'</span>, stub_view, name<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"blog_detail"</span>),
]
</pre>
</div>
<p>Before we begin writing real views, we need to add some tests for the views we are about to create. We’ll need tests for a list view and a detail view, so&nbsp;add the following<span>&nbsp;</span><em>imports</em><span>&nbsp;</span>at the top of<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging/tests.py</span></code>:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">import</span> <span style="color: #0e84b5;">datetime</span>
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">django.utils.timezone</span> <span style="color: #008800;">import</span> utc<br>
<span style="color: #008800;">class</span> <span style="color: #bb0066;">FrontEndTestCase</span>(TestCase):
    <span style="color: #dd4422;">"""test views provided in the front-end"""</span>
    fixtures <span style="color: #333333;">=</span> [<span style="background-color: #fff0f0;">'blogging_test_fixture.json'</span>, ]

    <span style="color: #008800;">def</span> <span style="color: #0066bb;">setUp</span>(<span style="color: #007020;">self</span>):
        <span style="color: #007020;">self</span><span style="color: #333333;">.</span>now <span style="color: #333333;">=</span> datetime<span style="color: #333333;">.</span>datetime<span style="color: #333333;">.</span>utcnow()<span style="color: #333333;">.</span>replace(tzinfo<span style="color: #333333;">=</span>utc)
        <span style="color: #007020;">self</span><span style="color: #333333;">.</span>timedelta <span style="color: #333333;">=</span> datetime<span style="color: #333333;">.</span>timedelta(<span style="color: #0000dd;">15</span>)
        author <span style="color: #333333;">=</span> User<span style="color: #333333;">.</span>objects<span style="color: #333333;">.</span>get(pk<span style="color: #333333;">=</span><span style="color: #0000dd;">1</span>)
        <span style="color: #008800;">for</span> count <span style="color: #000000;">in</span> <span style="color: #007020;">range</span>(<span style="color: #0000dd;">1</span>, <span style="color: #0000dd;">11</span>):
            post <span style="color: #333333;">=</span> Post(title<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"Post %d Title"</span> <span style="color: #333333;">%</span> count,
                        text<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"foo"</span>,
                        author<span style="color: #333333;">=</span>author)
            <span style="color: #008800;">if</span> count <span style="color: #333333;">&lt;</span> <span style="color: #0000dd;">6</span>:
                <span style="color: #888888;"># publish the first five posts</span>
                pubdate <span style="color: #333333;">=</span> <span style="color: #007020;">self</span><span style="color: #333333;">.</span>now <span style="color: #333333;">-</span> <span style="color: #007020;">self</span><span style="color: #333333;">.</span>timedelta <span style="color: #333333;">*</span> count
                post<span style="color: #333333;">.</span>published_date <span style="color: #333333;">=</span> pubdate
            post<span style="color: #333333;">.</span>save()
</pre>
</div>
</div>
<div id="our-list-view" class="section">
<h3>Our List View</h3>
<p>We’d like our list view to show our posts.&nbsp;But in this blog, we have the ability to publish posts.Unpublished posts should not be seen in the front-end views.&nbsp;We set up our tests to have 5 published, and 5 unpublished posts.</p>
<p>Let’s add a test to demonstrate that the right ones show up.</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">class</span> <span style="color: #bb0066;">FrontEndTestCase</span>(TestCase): <span style="color: #888888;"># already here</span>
    <span style="color: #888888;"># ...</span>
    <span style="color: #008800;">def</span> <span style="color: #0066bb;">test_list_only_published</span>(<span style="color: #007020;">self</span>):
        resp <span style="color: #333333;">=</span> <span style="color: #007020;">self</span><span style="color: #333333;">.</span>client<span style="color: #333333;">.</span>get(<span style="background-color: #fff0f0;">'/'</span>)
        <span style="color: #888888;"># the content of the rendered response is always a bytestring</span>
        resp_text <span style="color: #333333;">=</span> resp<span style="color: #333333;">.</span>content<span style="color: #333333;">.</span>decode(resp<span style="color: #333333;">.</span>charset)
        <span style="color: #007020;">self</span><span style="color: #333333;">.</span>assertTrue(<span style="background-color: #fff0f0;">"Recent Posts"</span> <span style="color: #000000;">in</span> resp_text)
        <span style="color: #008800;">for</span> count <span style="color: #000000;">in</span> <span style="color: #007020;">range</span>(<span style="color: #0000dd;">1</span>, <span style="color: #0000dd;">11</span>):
            title <span style="color: #333333;">=</span> <span style="background-color: #fff0f0;">"Post %d Title"</span> <span style="color: #333333;">%</span> count
            <span style="color: #008800;">if</span> count <span style="color: #333333;">&lt;</span> <span style="color: #0000dd;">6</span>:
                <span style="color: #007020;">self</span><span style="color: #333333;">.</span>assertContains(resp, title, count<span style="color: #333333;">=</span><span style="color: #0000dd;">1</span>)
            <span style="color: #008800;">else</span>:
                <span style="color: #007020;">self</span><span style="color: #333333;">.</span>assertNotContains(resp, title)
</pre>
</div>
<p>We test first to ensure that each published post is visible in our view.&nbsp;Note that we also test to ensure that the unpublished posts are<span>&nbsp;</span><em>not</em><span>&nbsp;</span>visible.</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #c65d09;">(djangoenv)$</span> python manage.py <span style="color: #007020;">test </span>blogging
<span style="color: #888888;">Creating test database for alias 'default'...</span>
<span style="color: #888888;">.F.</span>
<span style="color: #888888;">======================================================================</span>
<span style="color: #888888;">FAIL: test_list_only_published (blogging.tests.FrontEndTestCase)</span>
<span style="color: #888888;">...</span>
<span style="color: #888888;">Ran 3 tests in 0.024s</span>

<span style="color: #888888;">FAILED (failures=1)</span>
<span style="color: #888888;">Destroying test database for alias 'default'...</span>
</pre>
</div>
<p><span>We will use the QuerySet API to fetch all the posts that have</span><span>&nbsp;</span><code class="docutils literal"><span class="pre">published_date</span></code><span>&nbsp;</span><span>set.&nbsp;Using the chaining nature of the API we order these posts by</span><span>&nbsp;</span><code class="docutils literal"><span class="pre">published_date.&nbsp;</span></code><span>Remember, no query will have been issued to the database yet. </span></p>
<p>Add the view for listing blog posts to<span>&nbsp;</span><code class="docutils literal"><span class="pre">views.py</span></code>.</p>
<p><iframe style="width: 700px; height: 405px;" title="Internet Programming in Python: 07.03 The List View" src="./django_blog_files/retrieve(3).html" width="700px" height="405px" allowfullscreen="allowfullscreen" webkitallowfullscreen="webkitallowfullscreen" mozallowfullscreen="mozallowfullscreen" allow="geolocation *; midi *; encrypted-media *; autoplay *"></iframe></p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #888888;"># add these imports</span>
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">django.template</span> <span style="color: #008800;">import</span> loader
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">blogging.models</span> <span style="color: #008800;">import</span> Post

<span style="color: #888888;"># and this view</span>
<span style="color: #008800;">def</span> <span style="color: #0066bb;">list_view</span>(request):
    published <span style="color: #333333;">=</span> Post<span style="color: #333333;">.</span>objects<span style="color: #333333;">.</span>exclude(published_date__exact<span style="color: #333333;">=</span><span style="color: #008800;">None</span>)
    posts <span style="color: #333333;">=</span> published<span style="color: #333333;">.</span>order_by(<span style="background-color: #fff0f0;">'-published_date'</span>)
    template <span style="color: #333333;">=</span> loader<span style="color: #333333;">.</span>get_template(<span style="background-color: #fff0f0;">'blogging/list.html'</span>)
    context <span style="color: #333333;">=</span> {<span style="background-color: #fff0f0;">'posts'</span>: posts}
    body <span style="color: #333333;">=</span> template<span style="color: #333333;">.</span>render(context)
    <span style="color: #008800;">return</span> HttpResponse(body, content_type<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"text/html"</span>)
</pre>
</div>
</div>
<h3>Templates in Django</h3>
<p>Before we move on, a quick word about Django templates.&nbsp;&nbsp;Django templates<span>&nbsp;contain the static parts of the desired HTML output as well as some special syntax describing how dynamic content will be inserted.&nbsp;</span>Django templates<span>&nbsp;</span><strong>do not</strong><span>&nbsp;</span>allow any python expressions. Read more about Django templates <a href="https://docs.djangoproject.com/en/2.1/topics/templates/" class="external" target="_blank" rel="noreferrer noopener"><span>here</span><span class="external_link_icon" style="margin-inline-start: 5px; display: inline-block; text-indent: initial; " role="presentation"><svg viewBox="0 0 1920 1920" xmlns="http://www.w3.org/2000/svg" style="width:1em; height:1em; vertical-align:middle; fill:currentColor">
    <path d="M1226.667 267c88.213 0 160 71.787 160 160v426.667H1280v-160H106.667v800C106.667 1523 130.56 1547 160 1547h1066.667c29.44 0 53.333-24 53.333-53.333v-213.334h106.667v213.334c0 88.213-71.787 160-160 160H160c-88.213 0-160-71.787-160-160V427c0-88.213 71.787-160 160-160Zm357.706 442.293 320 320c20.8 20.8 20.8 54.614 0 75.414l-320 320-75.413-75.414 228.907-228.906H906.613V1013.72h831.254L1508.96 784.707l75.413-75.414Zm-357.706-335.626H160c-29.44 0-53.333 24-53.333 53.333v160H1280V427c0-29.333-23.893-53.333-53.333-53.333Z" fill-rule="evenodd"></path>
</svg>
<span class="screenreader-only">Links to an external site.</span></span></a>.</p>
<div class="build docutils container">
<p>Our view tries to load <code class="docutils literal"><span class="pre">blogging/list.html</span></code>.</p>
<p>Django is going to try to find this template&nbsp;<em>inside of a template directory</em> in one of our apps, or in the mysite project template directory that we created earlier. Of course, this template is specific to blogging so we're going to want to put it inside of our blogging app's template directory. The full path of this file will be <code class="docutils literal"><span class="pre">blogging/templates/blogging/list.html</span></code>.</p>
<p><strong>Why are we putting a "blogging" directory inside of the template folder for our blogging app?</strong> Remember that we have "list.html" and "detail.html" templates in both our blogging and our polling apps. Django's template resolution system lets you override app templates. This convention helps us give those templates names that are unique across the entire Django Blog application:</p>
<ul>
<li>We created a "list.html" template for our polling app.</li>
<li>We placed that "list.html" template inside of a directory named "polling", in the templates directory for our polling app.</li>
<li>This makes the name of our template "polling/list.html"</li>
<li>When Django looks for the "polling/list.html" template, it will look inside all of the template directories for all of the apps. It will find that template in the "polling/templates/" directory.</li>
<li>If we wanted to, we could override this template by creating a "mysite/templates/polling/list.html" file. We won't do anything like that in this project, but it comes in handy when overriding templates that ship with third-party addons.</li>
</ul>
</div>
<div class="build docutils container">
<p>So create the <code class="docutils literal"><span class="pre">templates/blogging</span></code> directory structure inside of your blogging app, and then create a new file <code class="docutils literal"><span class="pre">blogging/templates/blogging/list.html</span></code>:</p>
</div>
<div class="highlight-jinja">
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #557799;">{%</span> <span style="color: #008800;">extends</span> <span style="background-color: #fff0f0;">"base.html"</span> <span style="color: #557799;">%}{%</span> <span style="color: #008800;">block</span> <span style="color: #996633;">content</span> <span style="color: #557799;">%}</span>
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  <span style="color: #557799;">{%</span> <span style="color: #008800;">comment</span> <span style="color: #557799;">%}</span><span style="color: #888888;"> here is where the query happens </span><span style="color: #557799;">{%</span> <span style="color: #008800;">endcomment</span> <span style="color: #557799;">%}</span>
  <span style="color: #557799;">{%</span> <span style="color: #008800;">for</span> <span style="color: #996633;">post</span> <span style="color: #008800;">in</span> <span style="color: #996633;">posts</span> <span style="color: #557799;">%}</span>
  &lt;div class="post"&gt;
    &lt;h2&gt;<span style="color: #557799;">{{</span> <span style="color: #996633;">post</span> <span style="color: #557799;">}}</span>&lt;/h2&gt;
    &lt;p class="byline"&gt;
      Posted by <span style="color: #557799;">{{</span> <span style="color: #996633;">post.author.username</span> <span style="color: #557799;">}}</span> &amp;mdash; <span style="color: #557799;">{{</span> <span style="color: #996633;">post.published_date</span> <span style="color: #557799;">}}</span>
    &lt;/p&gt;
    &lt;div class="post-body"&gt;
      <span style="color: #557799;">{{</span> <span style="color: #996633;">post.text</span> <span style="color: #557799;">}}</span>
    &lt;/div&gt;
    &lt;ul class="categories"&gt;
      <span style="color: #557799;">{%</span> <span style="color: #008800;">for</span> <span style="color: #996633;">category</span> <span style="color: #008800;">in</span> <span style="color: #996633;">post.categories.all</span> <span style="color: #557799;">%}</span>
        &lt;li&gt;<span style="color: #557799;">{{</span> <span style="color: #996633;">category</span> <span style="color: #557799;">}}</span>&lt;/li&gt;
      <span style="color: #557799;">{%</span> <span style="color: #008800;">endfor</span> <span style="color: #557799;">%}</span>
    &lt;/ul&gt;
  &lt;/div&gt;
  <span style="color: #557799;">{%</span> <span style="color: #008800;">endfor</span> <span style="color: #557799;">%}</span>
<span style="color: #557799;">{%</span> <span style="color: #008800;">endblock</span> <span style="color: #557799;">%}</span>
</pre>
</div>
<p>Remember in&nbsp;<code>views.py</code> we added</p>
</div>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;">context <span style="color: #333333;">=</span> {<span style="background-color: #fff0f0;">'posts'</span>: posts}
body <span style="color: #333333;">=</span> template<span style="color: #333333;">.</span>render(context)
</pre>
</div>
<p>Django templates are rendered by passing in a<span>&nbsp;</span><em>context.&nbsp;</em>We add our posts to that context so they can be used by the template.</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">return</span> HttpResponse(body, content_type<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"text/html"</span>)
</pre>
</div>
<p>Finally, we build an HttpResponse and return it.&nbsp;This is, fundamentally, no different from the<span>&nbsp;</span><code class="docutils literal"><span class="pre">stub_view</span></code><span>&nbsp;</span>just above.&nbsp;We need to fix the url for our blog index page</p>
<p>Update<span>&nbsp;</span><code class="docutils literal"><span class="pre">urls.py</span></code><span>&nbsp;</span>in<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging</span></code>:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #888888;"># import the new view</span>
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">blogging.views</span> <span style="color: #008800;">import</span> list_view

<span style="color: #888888;"># and then update the urlconf for ''</span>
path(<span style="background-color: #fff0f0;">''</span>,
    list_view,  <span style="color: #888888;">#&lt;-- Change this value from stub_view</span>
    name<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"blog_index"</span>),
</pre>
</div>
<p>Then run your tests again:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #c65d09;">(djangoenv)$</span> python manage.py <span style="color: #007020;">test </span>blogging
<span style="color: #888888;">...</span>
<span style="color: #888888;">Ran 3 tests in 0.033s</span>

<span style="color: #888888;">OK</span>
</pre>
</div>
<p>This is a common pattern in Django views:</p>
<ul class="build simple">
<li>get a template from the loader</li>
<li>build a context</li>
<li>render the template</li>
<li>return an HttpResponse</li>
</ul>
<p>So common in fact that Django provides a shortcut for us to use:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;">render(request,&nbsp;template[,&nbsp;ctx][,&nbsp;ctx_instance])
</pre>
</div>
<p>Let’s replace most of our view with the<span>&nbsp;</span><code class="docutils literal"><span class="pre">render</span></code><span>&nbsp;</span>shortcut</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">from</span> <span style="color: #0e84b5;">django.shortcuts</span> <span style="color: #008800;">import</span> render <span style="color: #888888;"># &lt;- already there</span>

<span style="color: #888888;"># rewrite our view</span>
<span style="color: #008800;">def</span> <span style="color: #0066bb;">list_view</span>(request):
    published <span style="color: #333333;">=</span> Post<span style="color: #333333;">.</span>objects<span style="color: #333333;">.</span>exclude(published_date__exact<span style="color: #333333;">=</span><span style="color: #008800;">None</span>)
    posts <span style="color: #333333;">=</span> published<span style="color: #333333;">.</span>order_by(<span style="background-color: #fff0f0;">'-published_date'</span>)
    context <span style="color: #333333;">=</span> {<span style="background-color: #fff0f0;">'posts'</span>: posts}
    <span style="color: #008800;">return</span> render(request, <span style="background-color: #fff0f0;">'list.html'</span>, context)
</pre>
</div>
<p class="build">Remember though, all we did manually before is still happening.</p>
<p class="build">Fire up your server and have a look at <a href="http://localhost:8000/" class="external" target="_blank" rel="noreferrer noopener"><span>http://localhost:8000/</span><span class="external_link_icon" style="margin-inline-start: 5px; display: inline-block; text-indent: initial; " role="presentation"><svg viewBox="0 0 1920 1920" xmlns="http://www.w3.org/2000/svg" style="width:1em; height:1em; vertical-align:middle; fill:currentColor">
    <path d="M1226.667 267c88.213 0 160 71.787 160 160v426.667H1280v-160H106.667v800C106.667 1523 130.56 1547 160 1547h1066.667c29.44 0 53.333-24 53.333-53.333v-213.334h106.667v213.334c0 88.213-71.787 160-160 160H160c-88.213 0-160-71.787-160-160V427c0-88.213 71.787-160 160-160Zm357.706 442.293 320 320c20.8 20.8 20.8 54.614 0 75.414l-320 320-75.413-75.414 228.907-228.906H906.613V1013.72h831.254L1508.96 784.707l75.413-75.414Zm-357.706-335.626H160c-29.44 0-53.333 24-53.333 53.333v160H1280V427c0-29.333-23.893-53.333-53.333-53.333Z" fill-rule="evenodd"></path>
</svg>
<span class="screenreader-only">Links to an external site.</span></span></a>. You should see a list of all your posts. Once you have this working, commit your changes.</p>
</div>
<div id="id2" class="section">
<h3>Review</h3>
<p>We’ve got the front page of our application working great.&nbsp;Next, we’ll need to provide a view of a detail page for a single post.&nbsp;Then we’ll provide a way to log in and to navigate between the public part of our application and the admin behind it.&nbsp;If you’ve fallen behind, the app as it stands is available <span class="ally-file-link-holder link_holder"><span class="instructure_file_holder link_holder instructure_file_link_holder"><a class="" title="DjangoBlog_Stage2.zip" href="https://canvas.uw.edu/courses/1688237/files/107485806/download?wrap=1" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1688237/files/107485806" data-api-returntype="File" data-id="107485806">here</a><a class="file_download_btn" role="button" download="" style="margin-inline-start: 5px; text-decoration: none;" href="https://canvas.uw.edu/courses/1688237/files/107485806/download?download_frd=1" data-id="107485806"><span role="presentation"><svg viewBox="0 0 1920 1920" xmlns="http://www.w3.org/2000/svg" style="width:1em; height:1em; vertical-align:middle; fill:currentColor">
    <path d="m1807.093 1482.477 79.736 79.963-355.313 355.312H355.346L.035 1562.44l79.85-79.963 322.22 322.334H1484.76l322.334-322.334ZM997.677-.033v1167.02l355.313-355.313 79.962 79.85-491.858 491.633L449.46 891.524l79.962-79.85 355.313 355.313V-.033h112.941Z" fill-rule="evenodd"></path>
</svg>
</span><span class="screenreader-only">Download here</span></a></span></span>. </p>
</div>
<div id="our-detail-view" class="section">
<h3>Our Detail View</h3>
<p>Next, let’s add a view function for the detail view of a post.&nbsp;It will need to get the<span>&nbsp;</span><code class="docutils literal"><span class="pre">id</span></code><span>&nbsp;</span>of the post to show as an argument.&nbsp;Like the list view, it should only show published posts. Unlike the list view, it will need to return<span>&nbsp;</span><em>something</em><span>&nbsp;</span>if an unpublished post is requested.</p>
<p>Let’s start with the tests in<span>&nbsp;</span><code>views.py</code></p>
<p>Add the following test to our<span>&nbsp;</span><code class="docutils literal"><span class="pre">FrontEndTestCase</span></code><span>&nbsp;</span>in<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging/tests.py</span></code>:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">    def</span> <span style="color: #0066bb;">test_details_only_published</span>(<span style="color: #007020;">self</span>):
        <span style="color: #008800;">for</span> count <span style="color: #000000;">in</span> <span style="color: #007020;">range</span>(<span style="color: #0000dd;">1</span>, <span style="color: #0000dd;">11</span>):
            title <span style="color: #333333;">=</span> <span style="background-color: #fff0f0;">"Post %d Title"</span> <span style="color: #333333;">%</span> count
            post <span style="color: #333333;">=</span> Post<span style="color: #333333;">.</span>objects<span style="color: #333333;">.</span>get(title<span style="color: #333333;">=</span>title)
            resp <span style="color: #333333;">=</span> <span style="color: #007020;">self</span><span style="color: #333333;">.</span>client<span style="color: #333333;">.</span>get(<span style="background-color: #fff0f0;">'/posts/%d/'</span> <span style="color: #333333;">%</span> post<span style="color: #333333;">.</span>pk)
            <span style="color: #008800;">if</span> count <span style="color: #333333;">&lt;</span> <span style="color: #0000dd;">6</span>:
                <span style="color: #007020;">self</span><span style="color: #333333;">.</span>assertEqual(resp<span style="color: #333333;">.</span>status_code, <span style="color: #0000dd;">200</span>)
                <span style="color: #007020;">self</span><span style="color: #333333;">.</span>assertContains(resp, title)
            <span style="color: #008800;">else</span>:
                <span style="color: #007020;">self</span><span style="color: #333333;">.</span>assertEqual(resp<span style="color: #333333;">.</span>status_code, <span style="color: #0000dd;">404</span>)
</pre>
</div>
<p>Then run your tests:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #c65d09;">(djangoenv)$</span> python manage.py <span style="color: #007020;">test </span>blogging
<span style="color: #888888;">Creating test database for alias 'default'...</span>
<span style="color: #888888;">.F..</span>
<span style="color: #888888;">======================================================================</span>
<span style="color: #888888;">FAIL: test_details_only_published (blogging.tests.FrontEndTestCase)</span>
<span style="color: #888888;">...</span>
<span style="color: #888888;">Ran 4 tests in 0.043s</span>

<span style="color: #888888;">FAILED (failures=1)</span>
<span style="color: #888888;">Destroying test database for alias 'default'...</span>
</pre>
</div>
<p>Now, add a new view to<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging/views.py</span></code>:</p>
<p><iframe style="width: 700px; height: 405px;" title="Internet Programming in Python: 07.04 The Detail View" src="./django_blog_files/retrieve(4).html" width="700px" height="405px" allowfullscreen="allowfullscreen" webkitallowfullscreen="webkitallowfullscreen" mozallowfullscreen="mozallowfullscreen" allow="geolocation *; midi *; encrypted-media *; autoplay *"></iframe></p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #008800;">def</span> <span style="color: #0066bb;">detail_view</span>(request, post_id):
    published <span style="color: #333333;">=</span> Post<span style="color: #333333;">.</span>objects<span style="color: #333333;">.</span>exclude(published_date__exact<span style="color: #333333;">=</span><span style="color: #008800;">None</span>)
    <span style="color: #008800;">try</span>:
        post <span style="color: #333333;">=</span> published<span style="color: #333333;">.</span>get(pk<span style="color: #333333;">=</span>post_id)
    <span style="color: #008800;">except</span> Post<span style="color: #333333;">.</span>DoesNotExist:
        <span style="color: #008800;">raise</span> Http404
    context <span style="color: #333333;">=</span> {<span style="background-color: #fff0f0;">'post'</span>: post}
    <span style="color: #008800;">return</span> render(request, <span style="background-color: #fff0f0;">'blogging/detail.html'</span>, context)
</pre>
</div>
<p>One of the features of the Django ORM is that all models raise a DoesNotExist exception if<span>&nbsp;</span><code class="docutils literal"><span class="pre">get</span></code><span>&nbsp;</span>returns nothing.&nbsp;This exception is actually an attribute of the Model you look for.&nbsp;There’s also an<span>&nbsp;</span><code class="docutils literal"><span class="pre">ObjectDoesNotExist</span></code><span>&nbsp;</span>for when you don’t know which model you have.&nbsp;We can use that fact to raise a Not Found exception.&nbsp;Django will handle the rest for us.</p>
<p>We also need to add<span>&nbsp;</span><code class="docutils literal"><span class="pre">detail.html</span></code><span>&nbsp;</span>to<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging/templates/blogging/</span></code>:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #557799;">{%</span> <span style="color: #008800;">extends</span> <span style="background-color: #fff0f0;">"base.html"</span> <span style="color: #557799;">%}</span>

<span style="color: #557799;">{%</span> <span style="color: #008800;">block</span> <span style="color: #996633;">content</span> <span style="color: #557799;">%}</span>
&lt;a class="backlink" href="/"&gt;Home&lt;/a&gt;
&lt;h1&gt;<span style="color: #557799;">{{</span> <span style="color: #996633;">post</span> <span style="color: #557799;">}}</span>&lt;/h1&gt;
&lt;p class="byline"&gt;
  Posted by <span style="color: #557799;">{{</span> <span style="color: #996633;">post.author.username</span> <span style="color: #557799;">}}</span> &amp;mdash; <span style="color: #557799;">{{</span> <span style="color: #996633;">post.published_date</span> <span style="color: #557799;">}}</span>
&lt;/p&gt;
&lt;div class="post-body"&gt;
  <span style="color: #557799;">{{</span> <span style="color: #996633;">post.text</span> <span style="color: #557799;">}}</span>
&lt;/div&gt;
&lt;ul class="categories"&gt;
  <span style="color: #557799;">{%</span> <span style="color: #008800;">for</span> <span style="color: #996633;">category</span> <span style="color: #008800;">in</span> <span style="color: #996633;">post.categories.all</span> <span style="color: #557799;">%}</span>
    &lt;li&gt;<span style="color: #557799;">{{</span> <span style="color: #996633;">category</span> <span style="color: #557799;">}}</span>&lt;/li&gt;
  <span style="color: #557799;">{%</span> <span style="color: #008800;">endfor</span> <span style="color: #557799;">%}</span>
&lt;/ul&gt;
<span style="color: #557799;">{%</span> <span style="color: #008800;">endblock</span> <span style="color: #557799;">%}</span>
</pre>
</div>
<p>In order to view a single post, we’ll need a link from the list view</p>
<p>We can use the<span>&nbsp;</span><code class="docutils literal"><span class="pre">url</span></code><span>&nbsp;</span>template tag:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #557799;">{%</span> <span style="color: #008800;">url</span> <span style="background-color: #fff0f0;">'&lt;view_name&gt;'</span> <span style="color: #996633;">arg1</span> <span style="color: #996633;">arg2</span> <span style="color: #557799;">%}</span>
</pre>
</div>
<p>In our <code class="docutils literal"><span class="pre">blogging/list.html</span></code><span>&nbsp;</span>template, let’s link the post titles:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #557799;">{%</span> <span style="color: #008800;">for</span> <span style="color: #996633;">post</span> <span style="color: #008800;">in</span> <span style="color: #996633;">posts</span> <span style="color: #557799;">%}</span>
&lt;div class="post"&gt;
  &lt;h2&gt;             &lt;!-- Replace the existing &lt;h2&gt;...&lt;/h2&gt; tag --&gt;
    &lt;a href="<span style="color: #557799;">{%</span> <span style="color: #008800;">url</span> <span style="background-color: #fff0f0;">'blog_detail'</span> <span style="color: #996633;">post.pk</span> <span style="color: #557799;">%}</span>"&gt;<span style="color: #557799;">{{</span> <span style="color: #996633;">post</span> <span style="color: #557799;">}}</span>&lt;/a&gt;
  &lt;/h2&gt;
  ...
</pre>
</div>
<p>Again, we need to insert our new view into the existing<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging/urls.py</span></code><span>&nbsp;</span>in<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging</span></code>:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #888888;"># import the view</span>
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">blogging.views</span> <span style="color: #008800;">import</span> detail_view

path(<span style="background-color: #fff0f0;">'posts/&lt;int:post_id&gt;/'</span>,
    detail_view, <span style="color: #888888;">#&lt;-- Change this from stub_view</span>
    name<span style="color: #333333;">=</span><span style="background-color: #fff0f0;">"blog_detail"</span>),
</pre>
</div>
<p>Then run your tests:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #c65d09;">(djangoenv)$</span> python manage.py <span style="color: #007020;">test </span>blogging
<span style="color: #888888;">...</span>
<span style="color: #888888;">Ran 4 tests in 0.077s</span>

<span style="color: #888888;">OK</span>
</pre>
</div>
<p>We’ve got some good stuff to look at now. Fire up the server and reload your blog index page and click around a bit.&nbsp;You can now move back and forth between list and detail view.&nbsp;Try loading the detail view for a post that doesn’t exist.&nbsp;</p>
<p>You’ve got a functional blog!</p>
<div class="build docutils container">
<p>It’s not very pretty, though.&nbsp;We can fix that by adding some CSS.&nbsp;This gives us a chance to learn about Django’s handling of<span>&nbsp;</span><em>static files.</em></p>
<p>Once you have this working, commit your changes.</p>
</div>
</div>
<div id="static-files" class="section">
<h3>Static Files</h3>
<p>Like templates, Django expects to find static files in particular locations.&nbsp;It will look for them in a directory named</p>
<code>static</code> in any installed apps.&nbsp;They will be served from the URL path in the STATIC_URL setting.&nbsp;By default, this is<span>&nbsp;</span><code class="docutils literal"><span class="pre">/static/. T</span></code>o allow Django to automatically build the correct URLs for your static files, you use a special<span>&nbsp;</span><em>template tag</em>:
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #557799;">{%</span> <span style="color: #008800;">static</span> <span style="color: #333333;">&lt;</span><span style="color: #996633;">filename</span><span style="color: #333333;">&gt;</span> <span style="color: #557799;">%}</span>
</pre>
</div>
<p>We have prepared a CSS file for us to use, available at: <span class="ally-file-link-holder link_holder"><span class="instructure_file_holder link_holder instructure_file_link_holder"><a id="72594805" class="inline_disabled" href="https://canvas.uw.edu/courses/1688237/files/107485833?wrap=1" target="_blank" data-api-endpoint="https://canvas.uw.edu/api/v1/courses/1688237/files/107485833" data-api-returntype="File" data-id="107485833">django_blog.css</a><a class="file_download_btn" role="button" download="" style="margin-inline-start: 5px; text-decoration: none;" href="https://canvas.uw.edu/courses/1688237/files/107485833/download?download_frd=1" data-id="107485833"><span role="presentation"><svg viewBox="0 0 1920 1920" xmlns="http://www.w3.org/2000/svg" style="width:1em; height:1em; vertical-align:middle; fill:currentColor">
    <path d="m1807.093 1482.477 79.736 79.963-355.313 355.312H355.346L.035 1562.44l79.85-79.963 322.22 322.334H1484.76l322.334-322.334ZM997.677-.033v1167.02l355.313-355.313 79.962 79.85-491.858 491.633L449.46 891.524l79.962-79.85 355.313 355.313V-.033h112.941Z" fill-rule="evenodd"></path>
</svg>
</span><span class="screenreader-only">Download django_blog.css</span></a></span></span>&nbsp;</p>
<p>Create a new directory<span>&nbsp;</span><code class="docutils literal"><span class="pre">static</span></code><span>&nbsp;</span>in the<span>&nbsp;</span><code class="docutils literal"><span class="pre">blogging</span></code><span>&nbsp;</span>app.</p>
<p>Copy the<span>&nbsp;</span><code class="docutils literal"><span class="pre">django_blog.css</span></code><span>&nbsp;</span>file into that new directory.</p>
<p>Next, load the static files template tag into<span>&nbsp;</span><code class="docutils literal"><span class="pre">base.html</span></code><span>&nbsp;</span>(this<span>&nbsp;</span><strong>must</strong><span>&nbsp;</span>be on the<span>&nbsp;</span><em>first line</em><span>&nbsp;</span>of the template):</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #557799;">{%</span> <span style="color: #008800;">load</span> <span style="color: #996633;">static</span> <span style="color: #557799;">%}</span>
</pre>
</div>
<p>Finally, add a link to the stylesheet using the special template tag:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;">&lt;title&gt;My Django Blog&lt;/title&gt; &lt;!-- This is already present --&gt;
&lt;link type="text/css" rel="stylesheet" href="<span style="color: #557799;">{%</span> <span style="color: #008800;">static</span> <span style="background-color: #fff0f0;">'django_blog.css'</span> <span style="color: #557799;">%}</span>"&gt;
</pre>
</div>
<p>Reload<span>&nbsp;</span><a class="reference external" href="http://localhost:8000/">http://localhost:8000/</a><span>&nbsp;</span>and view the results of your work.&nbsp;We now have a reasonable view of the posts of our blog on the front end and we have a way to create and categorize posts using the admin. However, we lack a way to move between the two.&nbsp;Let’s add that ability next.</p>
<p><span>Once you have this working, commit your changes.</span></p>
</div>
<div id="global-navigation" class="section">
<h3>Global Navigation</h3>
<p>We’ll start by adding a control bar to our<span>&nbsp;</span><code class="docutils literal"><span class="pre">base.html</span></code><span>&nbsp;</span>template:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #557799;">{%</span> <span style="color: #008800;">load</span> <span style="color: #996633;">staticfiles</span> <span style="color: #557799;">%}</span>
&lt;!DOCTYPE html&gt;  ...
 &lt;body&gt; &nbsp; 
  &lt;div id="header"&gt;  <span style="color: #888888;">{# header begins here #}</span>
   &lt;ul id="control-bar"&gt;
   <span style="color: #557799;">{%</span> <span style="color: #008800;">if</span> <span style="color: #996633;">user.is_authenticated</span> <span style="color: #557799;">%}</span>
    <span style="color: #557799;">{%</span> <span style="color: #008800;">if</span> <span style="color: #996633;">user.is_staff</span> <span style="color: #557799;">%}</span>&lt;li&gt;&lt;a href="<span style="color: #557799;">{%</span> <span style="color: #008800;">url</span> <span style="background-color: #fff0f0;">'admin:index'</span> <span style="color: #557799;">%}</span>"&gt;admin&lt;/a&gt;&lt;/li&gt;<span style="color: #557799;">{%</span> <span style="color: #008800;">endif</span> <span style="color: #557799;">%}</span>
     &lt;li&gt;&lt;a href="<span style="color: #557799;">{%</span> <span style="color: #008800;">url</span> <span style="background-color: #fff0f0;">'logout'</span> <span style="color: #557799;">%}</span>"&gt;logout&lt;/a&gt;&lt;/li&gt;
    <span style="color: #557799;">{%</span> <span style="color: #008800;">else</span> <span style="color: #557799;">%}</span>
     &lt;li&gt;&lt;a href="<span style="color: #557799;">{%</span> <span style="color: #008800;">url</span> <span style="background-color: #fff0f0;">'login'</span> <span style="color: #557799;">%}</span>"&gt;login&lt;/a&gt;&lt;/li&gt;
   <span style="color: #557799;">{%</span> <span style="color: #008800;">endif</span> <span style="color: #557799;">%}</span>
   &lt;/ul&gt;
  &lt;/div&gt;              <span style="color: #888888;">{# header ends here #}</span>
&lt;div id="container"&gt;  ...
</pre>
</div>
<p>When we set up our views, we used the<span>&nbsp;</span><code class="docutils literal"><span class="pre">render</span></code><span>&nbsp;</span>shortcut<code class="docutils literal"><span class="pre">.&nbsp;</span></code>This gives us access to<span>&nbsp;</span><code class="docutils literal"><span class="pre">user</span></code><span>&nbsp;</span>in our templates.&nbsp;It provides access to methods about the state and rights of that user.&nbsp;We can use these to conditionally display links or UI elements. Like only showing the admin link to staff members.&nbsp;Django also provides a reasonable set of views for login/logout.&nbsp;The first step to using them is to hook them into a urlconf.</p>
<p>Add the following to<span>&nbsp;</span><code class="docutils literal"><span class="pre">mysite/urls.py</span></code>:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #888888;"># add an import at the top</span>
<span style="color: #008800;">from</span> <span style="color: #0e84b5;">django.contrib.auth.views</span> <span style="color: #008800;">import</span> LoginView, LogoutView

<span style="color: #888888;"># and update the list of urlconfs</span>
    path(<span style="background-color: #fff0f0;">''</span>, include(<span style="background-color: #fff0f0;">'blogging.urls'</span>)),  <span style="color: #888888;"># &lt;- already there<br> &nbsp; &nbsp;path(<span style="background-color: #fff0f0;">'polling/'</span>, include(<span style="background-color: #fff0f0;">'polling.urls'</span>)), # &lt;- already there</span>
    path(<span style="background-color: #fff0f0;">'admin/'</span>, admin<span style="color: #333333;">.</span>site<span style="color: #333333;">.</span>urls),   <span style="color: #888888;"># &lt;- already there</span><span style="color: #888888;"><br></span>    path('login/', LoginView.as_view(template_name='login.html'), name="login"),<br>    path('logout/', LogoutView.as_view(next_page='/'), name="logout"),<br>
</pre>
</div>
<p>We need to create a new<span>&nbsp;</span><code class="docutils literal"><span class="pre">login.html</span></code><span>&nbsp;</span>template in<span>&nbsp;</span><code class="docutils literal"><span class="pre">mysite/templates</span></code>:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;"><span style="color: #557799;">{%</span> <span style="color: #008800;">extends</span> <span style="background-color: #fff0f0;">"base.html"</span> <span style="color: #557799;">%}</span>

<span style="color: #557799;">{%</span> <span style="color: #008800;">block</span> <span style="color: #996633;">content</span> <span style="color: #557799;">%}</span>
&lt;h1&gt;My Blog Login&lt;/h1&gt;
&lt;form action="" method="POST"&gt;<span style="color: #557799;">{%</span> <span style="color: #008800;">csrf_token</span> <span style="color: #557799;">%}</span>
  <span style="color: #557799;">{{</span> <span style="color: #996633;">form.as_p</span> <span style="color: #557799;">}}</span>
  &lt;p&gt;&lt;input type="submit" value="Log In"&gt;&lt;/p&gt;
&lt;/form&gt;
<span style="color: #557799;">{%</span> <span style="color: #008800;">endblock</span> <span style="color: #557799;">%}</span>
</pre>
</div>
<p>In a web application, submitting forms is potentially hazardous.&nbsp;Data is being sent to our application from some remote place.&nbsp;If that data is going to alter the state of our application, we<span>&nbsp;</span><strong>must</strong><span>&nbsp;</span>use POST.&nbsp;Even so, we are vulnerable to Cross-Site Request Forgery, a common attack vector.&nbsp;Django provides a convenient system to fight this.&nbsp;In fact, for POST requests, it<span>&nbsp;</span><em>requires</em><span>&nbsp;</span>that you use it.&nbsp;The Django middleware that does this is enabled by default.&nbsp;All you need to do is include the<span>&nbsp;</span><code class="docutils literal"><span class="pre">{%</span><span>&nbsp;</span><span class="pre">csrf_token</span><span>&nbsp;</span><span class="pre">%}</span></code><span>&nbsp;</span>tag in your form.</p>
<p>Finally, in<span>&nbsp;</span><code class="docutils literal"><span class="pre">settings.py</span></code><span>&nbsp;</span>add the following to the end:</p>
<div style="background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%;">LOGIN_URL <span style="color: #333333;">=</span> <span style="background-color: #fff0f0;">'/login/'</span>
LOGIN_REDIRECT_URL <span style="color: #333333;">=</span> <span style="background-color: #fff0f0;">'/'</span>
</pre>
</div>
<p>In adding a login view, we’ve gotten a sneak peek at how forms work in Django.&nbsp;However, learning more about them is beyond what we can achieve in this session.&nbsp;The form system in Django is quite nice, however. We urge you to<span>&nbsp;</span><a class="reference external" href="https://docs.djangoproject.com/en/2.1/topics/forms/">read more about it</a>.&nbsp;In particular, you might want to pay attention to the documentation on<span>&nbsp;</span><a href="https://docs.djangoproject.com/en/2.1/topics/forms/modelforms/" class="external" target="_blank" rel="noreferrer noopener"><span>Model Forms</span><span class="external_link_icon" style="margin-inline-start: 5px; display: inline-block; text-indent: initial; " role="presentation"><svg viewBox="0 0 1920 1920" xmlns="http://www.w3.org/2000/svg" style="width:1em; height:1em; vertical-align:middle; fill:currentColor">
    <path d="M1226.667 267c88.213 0 160 71.787 160 160v426.667H1280v-160H106.667v800C106.667 1523 130.56 1547 160 1547h1066.667c29.44 0 53.333-24 53.333-53.333v-213.334h106.667v213.334c0 88.213-71.787 160-160 160H160c-88.213 0-160-71.787-160-160V427c0-88.213 71.787-160 160-160Zm357.706 442.293 320 320c20.8 20.8 20.8 54.614 0 75.414l-320 320-75.413-75.414 228.907-228.906H906.613V1013.72h831.254L1508.96 784.707l75.413-75.414Zm-357.706-335.626H160c-29.44 0-53.333 24-53.333 53.333v160H1280V427c0-29.333-23.893-53.333-53.333-53.333Z" fill-rule="evenodd"></path>
</svg>
<span class="screenreader-only">Links to an external site.</span></span></a>.</p>
<p>We now have a workable, simple blog app in Django! If you fell behind at some point, the app as it now stands is available in the class GitHub repository.</p>
<p><span>Once you have this working, commit your changes.</span></p>
</div>
  
</div>
</div>
<div id="module_navigation_target"><div style=""><div class="module-sequence-padding"></div>
<div class="module-sequence-footer" role="navigation" aria-label="Module Navigation">
  <div class="module-sequence-footer-content">
    
      <span class="module-sequence-footer-button--previous" data-tooltip="right" data-html-tooltip-title="&lt;i class=&#39;icon-quiz&#39;&gt;&lt;/i&gt; Lesson 07 Readings Quiz">
          <a href="https://canvas.uw.edu/courses/1688237/modules/items/18564780" class="Button" aria-describedby="msf0-previous-desc" aria-label="Previous Module Item">
            <i class="icon-mini-arrow-left"></i>Previous
            <span id="msf0-previous-desc" class="hidden" hidden="">Previous: Lesson 07 Readings Quiz</span>
          </a>
      </span>
    

    
      <span class="module-sequence-footer-button--next" data-tooltip="left" data-html-tooltip-title="&lt;i class=&#39;icon-assignment&#39;&gt;&lt;/i&gt; Lesson 07 Activity">
        <a href="https://canvas.uw.edu/courses/1688237/modules/items/18564782" class="Button" aria-describedby="msf0-next-desc" aria-label="Next Module Item">
          Next<i class="icon-mini-arrow-right"></i>
          <span id="msf0-next-desc" class="hidden" hidden="">Next: Lesson 07 Activity</span>
        </a>
      </span>
    
  </div>
</div>
</div></div>

          </div>
        </div>
        <div id="right-side-wrapper" class="ic-app-main-content__secondary">
          <aside id="right-side" role="complementary">
            
          </aside>
        </div>
      </div>
    </div>
  </div>



    <div style="display:none;"><!-- Everything inside of this should always stay hidden -->
        <div id="page_view_id">252d39de-34ac-43da-82e7-62ec5c245d1a</div>
    </div>
  <div id="aria_alerts" class="hide-text affix" role="alert" aria-live="assertive"></div>
  <div id="StudentTray__Container"></div>
  <div id="react-router-portals"></div>
  

  <iframe src="./django_blog_files/post_message_forwarding.html" name="post_message_forwarding" title="post_message_forwarding" id="post_message_forwarding" sandbox="allow-scripts allow-same-origin" style="display:none;"></iframe>


  <script>
    Object.assign(
      ENV,
      {}
    )
  </script>

<link rel="preload" href="https://du11hjcvx0uqb.cloudfront.net/dist/webpack-production/inst_fs_service_worker-c-7146c1678a.js" as="script" type="text/javascript"><script>
//<![CDATA[
(window.bundles || (window.bundles = [])).push('inst_fs_service_worker');
//]]>
</script>
  <script>
//<![CDATA[

      ;["https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/104024559/canvas-default.js", "https://instructure-uploads.s3.amazonaws.com/account_100000000083919/attachments/79098377/custom.js"].forEach(function(src) {
        var s = document.createElement('script'); s.src = src; s.async = false;
        document.head.appendChild(s)
      });
//]]>
</script>

</div> <!-- #application -->


<div id="nav-tray-portal" style="position: relative; z-index: 99;" aria-hidden="true"></div><div class="tinymce-a11y-checker-container" aria-hidden="true"></div><div role="log" aria-live="assertive" aria-relevant="additions" class="ally-helper-hidden-accessible"></div><div id="file_preview_container" aria-hidden="true"></div><span dir="ltr"><span role="dialog" aria-label="File Preview Overlay"><span class="css-wmdqfo-mask"><div class="ef-file-preview-overlay"><div class="ef-file-preview-header"><h1 class="ef-file-preview-header-filename">django_blog.css</h1><div class="ef-file-preview-header-buttons"><a href="https://canvas.uw.edu/files/107485833/download?download_frd=1" download="" class="ef-file-preview-header-download ef-file-preview-button"><i class="icon-download"></i><span class="hidden-phone"> Download</span></a><button type="button" class="ef-file-preview-header-info ef-file-preview-button" aria-expanded="false"><div><i class="icon-info"></i><span class="hidden-phone"> Info</span></div></button><button type="button" class="ef-file-preview-header-close ef-file-preview-button"><i class="icon-end"></i><span class="hidden-phone"> Close</span></button></div></div><div class="ef-file-preview-stretch"><iframe allowfullscreen="" title="File Preview" src="./django_blog_files/file_preview.html" class="ef-file-preview-frame"></iframe></div></div></span></span></span></body></html>